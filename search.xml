<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Classpath是什么？</title>
    <url>/2020/09/04/Classpath%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>在写<code>SSM</code>配置文件的时候经常看到这个东西，比如：<code>classpath:applicationContext.xml</code>，有印象了吗😤？</p>
<a id="more"></a>
<p>请看下图👇，一看便知</p>
<p><img src="/assets/img/image-20200604094831938.png" alt="一般项目架构图"></p>
<p>可当项目被编译后，架构就变化了哦~😉</p>
<p><img src="/assets/img/image-20200604095454394.png" alt="编译后的架构图"></p>
<p>所以,编译后<code>java</code>文件夹的文件和<code>resource</code>文件夹的文件就都放在了<code>classes</code>目录；而<code>classpath</code>其实就是<code>WEB-INF/classes</code>这个目录路径</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS服务-域名解析和转发</title>
    <url>/2020/09/20/DNS%E6%9C%8D%E5%8A%A1-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%92%8C%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<p>在看frp时，看到它有一个Forward DNS query request的功能，看不懂，就翻了翻网上的资料，大概知道它是想干嘛了，但是既然谈到<span class="ljspan ljspan-red">转发DNS</span>，就干脆把DNS解析和转发等这些东西顺便写写✍️咯</p>
<a id="more"></a>	
<h2 id="DNS域名解析">DNS域名解析</h2>
<h3 id="namespace为互联网上的服务">namespace为互联网上的服务</h3>
<p>linux上有个文件，<code>/etc/resolv.conf</code>是用来只想互联网上的DNS服务器的。一般内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 222.222.222.222</span><br></pre></td></tr></table></figure>
<p>这里就是域名解析啦，一般计算机使用域名上网时，会先找该本机的DNS服务器。如果本地DNS能找到域名，本地DNS直接回复客户机。如果本地DNS服务器不知道你请求的域名，他就转发DNS请求到互联网上，查找域名，就是通过8.8.8.8或者222.222.222.222，然后将查询到的域名解析后，最终将域名解析结果返回给客户机</p>
<h3 id="namespace为127-0-0-53">namespace为127.0.0.53</h3>
<p>之前在一篇<span class="ljspan ljspan-reverse ljspan-green"><a href="">resolv.conf</a></span>有谈到有点这个东西，但是我没有解释，这里顺道解释咯，如果nameserver配置为127.0.0.53，那么它将不解析你的主机名。也就是不从本地主机上读取DNS服务</p>
<h3 id="namespace为主机IP">namespace为主机IP</h3>
<p>那能否把自己主机IP当作当作DNS服务器吗？而不用Internet上的DNS服务，当然可以啦:happy:</p>
<p>DNS服务安装完毕后，他就有根提示，天生就知道互联网上13个根DNS服务器。只要安装DNS服务的那台机器可以访问Internet，就完全可以解析全球域名。</p>
<p>因此DNS服务器的/etc/resolv.conf完全可以指向自己，对于未知域名，DNS服务器上的DNS服务会自己找根DNS服务器进行域名解析，并把解析结果保存在本地DNS服务器上。</p>
<hr>
<h2 id="域名解析转发">域名解析转发</h2>
<p>考虑如下场景，母公司内部配置有本地DNS服务器，负责解析母公司内部服务器域名以及互联网上的域名。子公司与母公司物理距离较远，两地使用专线链接，专线带宽不高。子公司内部计算机不直接连接互联网。</p>
<p>假如不在子公司内部设置DNS服务器，子公司内部计算机对母公司内部域名解析请求以及互联网上域名解析请求都会交由母公司的DNS服务器（为啥子公司电脑不直接填互联网上的DNS？1.解析不到母公司私网的服务器 2.公司也不可能允许你这么做）。这部分域名解析流量会严重占用专用链路的带宽，导致网络阻塞。</p>
<p>在子公司内部设置一个DNS服务器，但是这个DNS服务器又有点不同。对于自己不知道域名，他并没有请求互联网上的根DNS服务器，而是把域名解析的流量转发给了母公司DNS服务器，这样有效降低了专用链路上域名解析的带宽占用。这种场景就是DNS转发。</p>
<p>DNS转发还有2种场景（或者说2个参数）</p>
<p><strong>①</strong>foward only：子公司DNS服务器指向母公司DNS服务器请求DNS解析。如果母公司DNS服务器挂了 或 子公司到母公司链路故障 或 母公司DNS上不了网（子公司DNS服务器可以解析母公司内网服务器域名），子公司DNS服务器无法解析Internet域名</p>
<p><strong>②</strong>foward first：子公司DNS服务器优先指向母公司DNS服务器，如果母公司DNS服务器连不上（比如子公司到母公司的链路故障）会使用子DNS服务器保存的根DNS服务器来解析域名（这时候无法解析母公司内网域名，可以解析Internet域名）。</p>
<p>如果子公司到母公司之间链路是好的，单纯母公司DNS服务器上不了网。子公司可以解析母公司内网服务器域名，但是无法解析Internet域名。</p>
<blockquote>
<p>此段域名解析转发摘抄自这个<a href="https://www.cnblogs.com/kelamoyujuzhen/">kelamoyujuzhen</a>的<a href="https://www.cnblogs.com/kelamoyujuzhen/p/9526915.html">文章</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Java静态代理与动态代理</title>
    <url>/2020/09/11/Java%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="动态代理是什么？">动态代理是什么？</h2>
<ul>
<li>先理解代理，静态代理，后面才能理解动态代理</li>
</ul>
<p>代理可以把代购🛍拿来相比，就是通过代购让你要买某些东西时，不用自己亲自去，避免很多步骤和不必要的麻烦。<a id="more"></a>代理就是这么回事，比如你要做某些事，但是完成它，过程比较繁琐又麻烦💫，这时候就可以通过代理，避过不必要的麻烦来获取它</p>
<p>代理需要具备的东西，如下图：</p>
<p><img src="/assets/img/%E4%BB%A3%E7%90%86%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt="静态代理结构图"></p>
<p>代理类需要包含真实对象，同时需要实现接口，这个接口就是某些真实对象想要做的事，即方法，通过方法做想要做的事，这里所讲的就是<strong>静态代理</strong>的规则</p>
<p>但是<strong>静态代理</strong>有其弊端，因为如果你要做的事情多了，就需要不断实现接口和引入真实对象，这样的话，代理类就越来越膨胀，高藕合。不容易维护</p>
<p>而<strong>动态代理</strong>就是解决静态代理的弊端的，通过JDK的动态代理，它包含两个东西，一个是<strong>proxy</strong>，也就是代理类，只负责生成代理对象；一个是<strong>InvocationHandler</strong>，它的原型其实就是那个接口，它有一个<code>invoke()</code>方法,这是方法可以给真实对象添加功能，也就是业务增强（感觉这个方法可以自动执行，以完成业务增强功能）；<code>invoke()</code>方法里面有个method参数，这是利用反射的原理，因为刚开始并不知道代理的是什么对象，所以用对象的方法来调用需要优化的方法，也就是<code>invoke()</code>方法。这里的<code>invoke()</code>方法其实还是不太懂😭😭</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Maven依赖问题</title>
    <url>/2020/09/05/Maven%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>由于我的maven镜像配置是aliyun的，所以，我的所有依赖包都会去aliyun仓库去找，但是，一直找不到两个包</p>
<p>通过<a href="https://maven.aliyun.com/mvn/search">aliyun仓库服务</a>，我确实找不到这两个包的依赖，所以自然无法自动下载</p>
<a id="more"></a>
<p>但是我的<code>pom.xml</code>文件里面也配备了仓库啊，阿里云里面没有，那么我的<code>pom.xml</code>配备的仓库应该有了吧</p>
<p>构建我的项目却还一直报缺少依赖的错误。</p>
<p>通过上网查看，原因是：</p>
<p>我在<code>/path/to/maven/config/settings.xml</code>中看到我的mirrors属性中配置如下👇</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;mirror&gt;</span></span><br><span class="line">     <span class="params">&lt;id&gt;</span>aliyun<span class="params">&lt;/id&gt;</span></span><br><span class="line">  <span class="meta">#这里的“*”表示只用这个仓库，其他仓库都不用，全部忽略</span></span><br><span class="line">     <span class="params">&lt;mirrorOf&gt;</span>*<span class="params">&lt;/mirrorOf&gt;</span></span><br><span class="line">     <span class="params">&lt;name&gt;</span>aliyun maven<span class="params">&lt;/name&gt;</span></span><br><span class="line">     <span class="params">&lt;url&gt;</span>http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line"><span class="params">&lt;/mirror&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于这个原因，所以导致后面pom.xml配置的东西都被忽略了，所以才找不到那些依赖包💩</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft-Store打不开?</title>
    <url>/2020/09/05/Microsoft-Store%E6%89%93%E4%B8%8D%E5%BC%80/</url>
    <content><![CDATA[<p><strong>打不开microsoft的应用商城，window更新也没办法?</strong>,其实更新就可以了，只不过你的更新不是真正的更新🙌</p>
<blockquote>
<p>采用这个方法打开Microsoft Store,并不需要翻墙哦✔️</p>
</blockquote>
<a id="more"></a>
<h2 id="步骤">步骤</h2>
<p>​	1.到<strong>服务</strong>⚙️里面打开<code>Windows</code>更新，就可以更新<code>Windows</code></p>
<p>​	2.等待更新好了，重启系统💻，查看更新并尝试打开<code>Store</code>🏠,如果更新那里还是提示重启以完成重要更新,记得再重启</p>
<p>​	3.这样，一般就可以打开<code>Store</code></p>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>
<p>如果可以打开<code>Store</code>,但是图片加载不出来，<code>store</code>某些选项也打不开</p>
</li>
<li>
<p>打开系统自带**<code>IE</code>浏览器**，进入**<code>Internet</code>选项<strong>后，选择</strong>连接**栏目</p>
</li>
<li>
<p>点击<strong>局域网设置</strong>，进入设置页面以后，勾选上<strong>自动检测设置</strong>其他都不勾选</p>
</li>
<li>
<p>点击<strong>确定</strong>离开，就可以进入<code>Store</code>了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>PageHelper</title>
    <url>/2020/10/15/PageHelper/</url>
    <content><![CDATA[<p>没使用过分页之前，不觉得分页难，等到需要用到的时候，完全没有头绪，直到遇到<span class="ljspan ljspan-reverse ljspan-red">Mybatis Pagination</span> - <span class="ljspan ljspan-reverse ljspan-blue">PageHelper</span>才让我松了一口气，<span class="ljspan ljspan-reverse ljspan-blue">PageHelper</span>封装了很多分页的功能，判断前一页/后一页，第一页或最后一页；几个页面的数据封装在列表中，一次只显示这几个页面，快来看看吧😆<a id="more"></a></p>
<h3 id="配置">配置</h3>
<p><strong>引入依赖包</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;x.x.x&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><strong>配置PageHelper</strong></p>
<blockquote>
<p>使用mybatis-config.xml配置，还可以使用Spring容器配置，详情请看<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/en/HowToUse.md">官方文档</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    In the configuration file, </span></span><br><span class="line"><span class="comment">    plugins location must meet the requirements as the following order:</span></span><br><span class="line"><span class="comment">    properties?, settings?, </span></span><br><span class="line"><span class="comment">    typeAliases?, typeHandlers?, </span></span><br><span class="line"><span class="comment">    objectFactory?,objectWrapperFactory?, </span></span><br><span class="line"><span class="comment">    plugins?, </span></span><br><span class="line"><span class="comment">    environments?, databaseIdProvider?, mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- config params as the following --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--offset 等于 pageNum, limit 等于 pageSize--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;RowBounds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pageNum &lt;= 0 等于 the first page,  pageNum&gt; pages(total pages)等于 the last page--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更多关于参数的配置，请参考<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/en/HowToUse.md">官方文档</a></p>
<hr>
<h3 id="使用">使用</h3>
<blockquote>
<p>我直接使用pageInfo对象来操作分页数据的</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/获取第<span class="number">1</span>页，<span class="number">10</span>条内容，默认查询总数count</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PageHelper</span>.</span></span>start<span class="constructor">Page(1, 10)</span>;</span><br><span class="line">List&lt;User&gt; <span class="built_in">list</span> = userMapper.select<span class="constructor">All()</span>;</span><br><span class="line"><span class="comment">//用PageInfo对结果进行包装</span></span><br><span class="line">PageInfo page = <span class="keyword">new</span> <span class="constructor">PageInfo(<span class="params">list</span>)</span>;</span><br><span class="line"><span class="comment">//这里的page是一个对象，可以通过引入fastjson包，</span></span><br><span class="line"><span class="comment">//直接解析对象为json对象返回页面</span></span><br><span class="line"><span class="comment">//这样就能一步到位，在前端获取到分页信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试PageInfo全部属性</span></span><br><span class="line"><span class="comment">//PageInfo包含了非常全面的分页属性</span></span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(1, <span class="params">page</span>.<span class="params">getPageNum</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(10, <span class="params">page</span>.<span class="params">getPageSize</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(1, <span class="params">page</span>.<span class="params">getStartRow</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(10, <span class="params">page</span>.<span class="params">getEndRow</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(183, <span class="params">page</span>.<span class="params">getTotal</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(19, <span class="params">page</span>.<span class="params">getPages</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(1, <span class="params">page</span>.<span class="params">getFirstPage</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(8, <span class="params">page</span>.<span class="params">getLastPage</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(<span class="params">true</span>, <span class="params">page</span>.<span class="params">isFirstPage</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(<span class="params">false</span>, <span class="params">page</span>.<span class="params">isLastPage</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(<span class="params">false</span>, <span class="params">page</span>.<span class="params">isHasPreviousPage</span>()</span>);</span><br><span class="line"><span class="keyword">assert</span><span class="constructor">Equals(<span class="params">true</span>, <span class="params">page</span>.<span class="params">isHasNextPage</span>()</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis Generator</title>
    <url>/2020/09/04/Mybatis-Generator/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>通过<code>mybatis</code>跟数据库做IO，很方便，但是每次要写的<code>mapper</code>和<code>DAO</code>包括<code>Bean</code>，东西实在是太多了😢。所以通过颜群老师的在线课堂，我了解了<span class="ljspan ljspan-reverse ljspan-blue"><a href="http://mybatis.org/generator/index.html">Mybatis Generator</a></span>,可以一次性生成<code>Dao</code>、<code>mapper</code>和与数据库表对应的<code>bean</code>😆，真的很爽诶。</p>
<a id="more"></a>
<hr>
<h2 id="配置">配置</h2>
<p>在<span class="ljspan ljspan-blue"><a href="http://mybatis.org/generator/quickstart.html">官方文档</a></span>上，相关配置写得很清楚哦</p>
<h3 id="1-导入依赖包">1.导入依赖包</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#引入依赖包</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h3 id="2-编写MBG-mybatis-generator-文件">2.编写MBG(mybatis generator)文件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生成Mybatis3Simple形式的配置文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;org.hsqldb.jdbcDriver&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:hsqldb:mem:aname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置数据库表生成的对应bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置数据库表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;wxproject&#x27; tableName=&quot;</span><span class="attr">FooTable</span>&quot;  <span class="attr">domainObjectName</span>=<span class="string">&quot;FooTable&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>生成的<code>mybatis</code>相关文件内容，都跟MBG文件👀有关</p>
</blockquote>
<hr>
<h2 id="实现">实现</h2>
<h3 id="运行MBG配置文件">运行MBG配置文件</h3>
<p>有很<a href="http://mybatis.org/generator/running/running.html">多种方式</a>，我使用<code>java</code>方法，直接调用测试运行或者<code>main</code>函数内与运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"> <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line"> <span class="comment">//你的mbg文件，可以直接放在项目根目录中，这样就不用写路径了</span></span><br><span class="line"> File configFile = <span class="keyword">new</span> File(<span class="string">&quot;generatorConfig.xml&quot;</span>);</span><br><span class="line"> ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line"> Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line"> DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line"> MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line"> myBatisGenerator.generate(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Mybatis-Example">Mybatis Example</h2>
<p>刚开始接触到 <span class="ljspan ljspan-green">mybatis Example</span>的时候，我都是绕道走（甚至干脆不生成它），自己在mybatis生成的实例里面重新写方法，后面才发现它，大有用处😂，一起来看看吧！</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> countByExample(UserExample example) thorws SQLException    按条件计数</span><br><span class="line"><span class="built_in">int</span> deleteByPrimaryKey(Integer id) thorws SQLException    按主键删除</span><br><span class="line"><span class="built_in">int</span> deleteByExample(UserExample example) thorws SQLException    按条件查询</span><br><span class="line"><span class="built_in">String</span>/Integer insert(User record) thorws SQLException    插入数据（返回值为ID）</span><br><span class="line">User selectByPrimaryKey(Integer id) thorws SQLException    按主键查询</span><br><span class="line">ListselectByExample(UserExample example) thorws SQLException    按条件查询</span><br><span class="line">ListselectByExampleWithBLOGs(UserExample example) thorws SQLException    按条件查询（包括BLOB字段）。只有当数据表中的字段类型有为二进制的才会产生。</span><br><span class="line"><span class="built_in">int</span> updateByPrimaryKey(User record) thorws SQLException    按主键更新</span><br><span class="line"><span class="built_in">int</span> updateByPrimaryKeySelective(User record) thorws SQLException    按主键更新值不为<span class="keyword">null</span>的字段</span><br><span class="line"><span class="built_in">int</span> updateByExample(User record, UserExample example) thorws SQLException    按条件更新</span><br><span class="line"><span class="built_in">int</span> updateByExampleSelective(User record, UserExample example) thorws SQLException    按条件更新值不为<span class="keyword">null</span>的字段</span><br></pre></td></tr></table></figure>
<blockquote>
<p>很多关于 <span class="ljspan ljspan-green">mybatis Example</span>的方法吧</p>
</blockquote>
<h3 id="案例：">案例：</h3>
<p>Mybatis的逆向工程中会生成实例及实例对应的example，example用于添加条件，相当where后面的部分</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">xxxExample example = <span class="keyword">new</span> xxx<span class="constructor">Example()</span>;</span><br><span class="line">Criteria criteria = <span class="keyword">new</span> <span class="constructor">Example()</span>.create<span class="constructor">Criteria()</span>;</span><br><span class="line">example.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>example和criteria有很多的方法可供使用</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">example.setOrderByClause(“字段名 ASC”);    添加升序排列条件，DESC为降序</span><br><span class="line">example.setDistinct(<span class="literal">false</span>)    去除重复，boolean型，<span class="literal">true</span>为选择不重复的记录。</span><br><span class="line">criteria.andXxxIsNull    添加字段xxx为<span class="literal">null</span>的条件</span><br><span class="line">criteria.andXxxIsNotNull    添加字段xxx不为<span class="literal">null</span>的条件</span><br><span class="line">criteria.andXxxEqualTo(<span class="keyword">value</span>)    添加xxx字段等于<span class="keyword">value</span>条件</span><br><span class="line">criteria.andXxxNotEqualTo(<span class="keyword">value</span>)    添加xxx字段不等于<span class="keyword">value</span>条件</span><br><span class="line">criteria.andXxxGreaterThan(<span class="keyword">value</span>)    添加xxx字段大于<span class="keyword">value</span>条件</span><br><span class="line">criteria.andXxxGreaterThanOrEqualTo(<span class="keyword">value</span>)    添加xxx字段大于等于<span class="keyword">value</span>条件</span><br><span class="line">criteria.andXxxLessThan(<span class="keyword">value</span>)    添加xxx字段小于<span class="keyword">value</span>条件</span><br><span class="line">criteria.andXxxLessThanOrEqualTo(<span class="keyword">value</span>)    添加xxx字段小于等于<span class="keyword">value</span>条件</span><br><span class="line">criteria.andXxxIn(List&lt;？&gt;)    添加xxx字段值在List&lt;？&gt;条件</span><br><span class="line">criteria.andXxxNotIn(List&lt;？&gt;)    添加xxx字段值不在List&lt;？&gt;条件</span><br><span class="line">criteria.andXxxLike(“%”+<span class="keyword">value</span>+”%”)    添加xxx字段值为<span class="keyword">value</span>的模糊查询条件</span><br><span class="line">criteria.andXxxNotLike(“%”+<span class="keyword">value</span>+”%”)    添加xxx字段值不为<span class="keyword">value</span>的模糊查询条件</span><br><span class="line">criteria.andXxxBetween(value1,value2)    添加xxx字段值在value1和value2之间条件</span><br><span class="line">criteria.andXxxNotBetween(value1,value2)    添加xxx字段值不在value1和value2之间条件</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="附加配置">附加配置</h2>
<p>针对<code>mybatis</code>，它还有一个配置文件<a href="http://mybatis.org/generator/afterRunning.html">MapperConfig.xml</a>，它对<span class="ljspan ljspan-black"><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis</a> </span>行为的设置和属性信息有关，可以通过<span class="ljspan ljspan-reverse ljspan-black"><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">配置参数</a></span>来设置生成mybatis相关文件的内容形式，比如<code>mapUnderscoreToCamelCase</code>开启<code>驼峰命名自动映射</code></p>
<hr>
<h2 id="注意事项">注意事项</h2>
<p>1.一般使用<code>mybatis generator</code>生成的<code>bean</code>,都是没有构造函数的；所以需要自己新建，但是如果有有参构造函数，就必须要有无参构造函数，这是必须的。</p>
<p>2.使用mybatis generator生成mapper.xml(也就是数据库语言)，发现只有几个功能，而且关键的insertSelective方法没有，这就很尴尬了😖，我改了依赖包发现没有用，最后发现是在mbg的配置文件中&lt;context&gt;中的属性targetRuntime,从原来的MyBatis3Simple改为MyBatis3，就可以了。</p>
<p>3.💥记得在<code>SpringIoC</code>容器中添加<code>mapperscannerconfigurer</code>这个<code>bean</code>，不然无法使用<code>dao</code>层里面的接口，因为<code>&lt;context:component-scan&gt;</code>扫描不包括<code>dao</code>层。</p>
<hr>
<h2 id="常见问题">常见问题</h2>
<h4 id="1-MyBatis-Generator-生成器把其他数据库的同名表生成下来的问题"><strong>1.MyBatis Generator 生成器把其他数据库的同名表生成下来的问题</strong></h4>
<p>这是因为mysql不支持schema和catalog，所以需要在&lt;jabcConnection&gt;中添加属性“ &lt;property name=“nullCatalogMeansCurrent” value=“true”/&gt;”</p>
<p>😵我看不懂🐢🐢，反正加了就对了，既解决了问题，加了对程序也没啥影响。</p>
<p><a href="https://blog.csdn.net/qq_40233736/article/details/83314596">参考文档</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/09/11/JavaScript/</url>
    <content><![CDATA[<h3 id="js比值函数">js比值函数</h3>
<ol>
<li><code>sort()</code>以字母顺序对数组进行升序排序</li>
<li>而**数字顺序<code>**sort( )</code>无法凭自己单独实现，这里就体现了比值函数的作用</li>
</ol>
<a id="more"></a>
<p>这就是比值函数：<code>function(a,b)&#123;return (a-b)&#125;</code>，会返回正负和零，<code>sort( )</code>可根据返回的值的<strong>正负</strong>对数组进行排序。</p>
<p><span class="ljspan"><a href="https://blog.csdn.net/qwe122343/article/details/103992772">参考文档</a></span></p>
<h3 id="Script标签嵌套内容">Script标签嵌套内容</h3>
<p>编写<code>js</code>出现的奇怪问题🎃一般地，引入资源，都用单独用一个<code>Script</code>标签，标签内内容为空，而改用src引入外部<code>js</code>资源。然后，我就想如果我引入的同时又在标签内写入，能不能用呢？</p>
<p>答案是，不管是标签内写的还是引用的外部资源，都无法相互使用</p>
<h3 id="Ajax">Ajax</h3>
<h4 id="当数据在浏览器跟服务器之间交换的时候，这些数据只能是文本，这时候就需要-Json-出马🐎了！">当数据在浏览器跟服务器之间交换的时候，这些数据只能是文本，这时候就需要**<code>Json</code>**出马🐎了！</h4>
<ol>
<li>使用<code>Ajax</code>来发送数据，可以遇到一个问题，貌似要在服务器端设置响应头部<code>Access-Control-Allow-Origin</code></li>
</ol>
<p><img src="/assets/img/JavaScript.png" alt="image-20200611105650226"></p>
<p>​	解决方案：把服务器响应的数据改为<code>Json</code>，这样就可以了！因为需要解析！</p>
<ol start="2">
<li>对于**<code>Ajax</code>**:通过对<code>javascript</code>中<code>Ajax</code>的练习📃，发现<code>Ajax</code>确实具备状态性，比如说，我刚刚搜索了某东西，然后信息很多，分了很多页，那么当我点击下一页时📑，发送<code>Ajax</code>请求，它会显示我刚刚搜索的内容的下一页，而不需要我再次提交搜索内容！</li>
<li><code>ajax</code>是发送异步请求📧：同步和异步得区别很明显，同步发送请求后，需要等到接收到返回信息和数据才能继续发送请求；而异步则可以在发送请求后，不需要等待接收返回信息，直接发送其他请求，等待返回信息和数据是在另一个线程⚙️中进行的，不影响当前线程。</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>Redis And Jedis</title>
    <url>/2020/09/04/Redis-And-Jedis/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>想通过缓存来保存微信公众号的<code>accesstoken</code>和<code>refreshtoken</code>，自己写也可以，就是在保存在某个类中，每次启动项目，调用这个类就可以实现存储，针对<code>accesstoken</code>生成一个，可用于所有用户和各个接口的调用的，还比较容易，但是<code>refreshtoken</code>需要匹配每个用户，怎么针对用户id来存储，就是一个难题了，虽然我之前使用<code>list</code>也可以实现，但是说实话，有点土！😒</p>
<a id="more"></a>
<h2 id="Redis">Redis</h2>
<h3 id="命令">命令</h3>
<p>获取缓存：get (key)</p>
<p>设置缓存：set (key) (value)</p>
<p>获取hash缓存：hget (key) (field)</p>
<p>删除所有缓存：flushdb</p>
<hr>
<h2 id="Java-Operation-Object–jedis">Java Operation Object–jedis</h2>
<h3 id="配置">配置</h3>
<blockquote>
<p>注意版本spring-data-redis版本！</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#在pom.xml上引入依赖，我是使用ssm框架来搭建的</span><br><span class="line"><span class="comment">&lt;!-- 配置redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在spring容器中配置两个关键的类<code>JedisConnectionFactory</code>和<code>RedisTemplate/StringRedisTemplate</code>。</p>
<p>这样就可以直接利用<code>RedisTemplate</code>对象来操作了。</p>
<p>当然，我推荐使用<code>StringRedisTemplate</code>,操作更加方便！😆</p>
<hr>
<h3 id="操作">操作</h3>
<h4 id="RedisTemplate注解-操作对象">RedisTemplate注解 操作对象</h4>
<p>可以直接使用，类似于使用<code>RedisTemplate</code>调用<code>OpsForXxx</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Redis geospatial operations, such as GEOADD, GEORADIUS</span></span><br><span class="line">GeoOperations</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis hash operations</span></span><br><span class="line">HashOperations</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis HyperLogLog operations, such as PFADD, PFCOUNT</span></span><br><span class="line">HyperLogLogOperations</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis list operations</span></span><br><span class="line">ListOperations</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis set operations</span></span><br><span class="line">SetOperations</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis string (or value) operations</span></span><br><span class="line">ValueOperations</span><br><span class="line"></span><br><span class="line"><span class="comment">//Redis zset (or sorted set) operations</span></span><br><span class="line">ZSetOperations</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="特殊的方法">特殊的方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过opsForValue()也可执行redisTemplate的方法。</span></span><br><span class="line">redisTemplate.opsForValue().getOperations().getExpire(<span class="string">&quot;key的名称&quot;</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="StringRedisTemplate操作集锦">StringRedisTemplate操作集锦</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*<span class="comment">//向redis里存入数据和设置缓存时间*  </span></span><br><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;baike&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="number">60</span> * <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">*<span class="comment">//val做-1操作*  </span></span><br><span class="line">stringRedisTemplate.boundValueOps(<span class="string">&quot;baike&quot;</span>).increment(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">*<span class="comment">//根据key获取缓存中的val*  </span></span><br><span class="line">stringRedisTemplate.opsForValue().get(<span class="string">&quot;baike&quot;</span>)</span><br><span class="line"></span><br><span class="line">*<span class="comment">//val +1*  </span></span><br><span class="line">stringRedisTemplate.boundValueOps(<span class="string">&quot;baike&quot;</span>).increment(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">*<span class="comment">//根据key获取过期时间*  </span></span><br><span class="line">stringRedisTemplate.getExpire(<span class="string">&quot;baike&quot;</span>);</span><br><span class="line"></span><br><span class="line">*<span class="comment">//根据key获取过期时间并换算成指定单位*  </span></span><br><span class="line">stringRedisTemplate.getExpire(<span class="string">&quot;baike&quot;</span>,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">*<span class="comment">//根据key删除缓存*  </span></span><br><span class="line">stringRedisTemplate.delete(<span class="string">&quot;baike&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查key是否存在，返回boolean值*  </span></span><br><span class="line">stringRedisTemplate.hasKey(<span class="string">&quot;baike&quot;</span>);</span><br><span class="line"></span><br><span class="line">*<span class="comment">//向指定key中存放set集合*  </span></span><br><span class="line">stringRedisTemplate.opsForSet().add(<span class="string">&quot;baike&quot;</span>, <span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置过期时间*  </span></span><br><span class="line">stringRedisTemplate.expire(<span class="string">&quot;baike&quot;</span>,<span class="number">1000</span> , TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据key查看集合中是否存在指定数据*  </span></span><br><span class="line">stringRedisTemplate.opsForSet().isMember(<span class="string">&quot;baike&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据key获取set集合*  </span></span><br><span class="line">stringRedisTemplate.opsForSet().members(<span class="string">&quot;baike&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证有效时间*</span></span><br><span class="line">Long expire = redisTemplate.boundHashOps(<span class="string">&quot;baike&quot;</span>).getExpire();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用底层命令</span></span><br><span class="line">StringRedisTemplate.execute((RedisCallback&lt;Void&gt;) con -&gt; &#123; con.hSet(<span class="string">&quot;age&quot;</span>.getBytes(),<span class="string">&quot;23&quot;</span>.getBytes());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;    &#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="RedisTemplate常用集合使用说明-opsForHash">RedisTemplate常用集合使用说明-opsForHash</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、put(H key, HK hashKey, HV value) </span><br><span class="line">    <span class="comment">//新增hashMap值 </span></span><br><span class="line">    redisTemplate.opsForHash().put(<span class="string">&quot;hashValue&quot;</span>,<span class="string">&quot;map1&quot;</span>,<span class="string">&quot;map1-1&quot;</span>);   		</span><br><span class="line">	redisTemplate.opsForHash().put(<span class="string">&quot;hashValue&quot;</span>,<span class="string">&quot;map2&quot;</span>,<span class="string">&quot;map2-2&quot;</span>);    </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、values(H key) </span><br><span class="line">    <span class="comment">//获取指定变量中的hashMap值。</span></span><br><span class="line">    List&lt;Object&gt; hashList = redisTemplate.opsForHash().values(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过values(H key)方法获取变量中的hashMap值:&quot;</span> + hashList);   </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、entries(H key) </span><br><span class="line">    <span class="comment">//获取变量中的键值对。 </span></span><br><span class="line">	Map&lt;Object,Object&gt; map = redisTemplate.opsForHash().entries(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过entries(H key)方法获取变量中的键值对:&quot;</span> + map);  </span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、get(H key, Object hashKey) </span><br><span class="line">   <span class="comment">// 获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null。 </span></span><br><span class="line">	Object mapValue = redisTemplate.opsForHash().get(<span class="string">&quot;hashValue&quot;</span>,<span class="string">&quot;map1&quot;</span>);   	</span><br><span class="line">	System.out.println(<span class="string">&quot;通过get(H key, Object hashKey)方法获取map键的值:&quot;</span> + mapValue); </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="comment">//hasKey(H key, Object hashKey) </span></span><br><span class="line">    判断变量中是否有指定的map键。 </span><br><span class="line">    <span class="keyword">boolean</span> hashKeyBoolean = redisTemplate.opsForHash().hasKey(<span class="string">&quot;hashValue&quot;</span>,<span class="string">&quot;map3&quot;</span>); </span><br><span class="line">	System.out.println(<span class="string">&quot;通过hasKey(H key, Object hashKey)方法判断变量中是否存在map键:&quot;</span> + hashKeyBoolean);     </span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、keys(H key) </span><br><span class="line">   <span class="comment">// 获取变量中的键。 </span></span><br><span class="line">	Set&lt;Object&gt; keySet = redisTemplate.opsForHash().keys(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过keys(H key)方法获取变量中的键:&quot;</span> + keySet);    </span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、size(H key) </span><br><span class="line">   <span class="comment">// 获取变量的长度。 </span></span><br><span class="line">    <span class="keyword">long</span> hashLength = redisTemplate.opsForHash().size(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过size(H key)方法获取变量的长度:&quot;</span> + hashLength);    </span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、increment(H key, HK hashKey, <span class="keyword">double</span> delta)  </span><br><span class="line">   <span class="comment">// 使变量中的键以double值的大小进行自增长。</span></span><br><span class="line">    <span class="keyword">double</span> hashIncDouble = 						redisTemplate.opsForHash().increment(<span class="string">&quot;hashInc&quot;</span>,<span class="string">&quot;map1&quot;</span>,<span class="number">3</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过increment(H key, HK hashKey, double delta)方法使变量中的键以值的大小进行自增长:&quot;</span> + hashIncDouble);    </span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、increment(H key, HK hashKey, <span class="keyword">long</span> delta) </span><br><span class="line">    <span class="comment">//使变量中的键以long值的大小进行自增长。 </span></span><br><span class="line">    <span class="keyword">long</span> hashIncLong = redisTemplate.opsForHash().increment(<span class="string">&quot;hashInc&quot;</span>,<span class="string">&quot;map2&quot;</span>,<span class="number">6</span>);   	</span><br><span class="line">	System.out.println(<span class="string">&quot;通过increment(H key, HK hashKey, long delta)方法使变量中的键以值的大小进行自增长:&quot;</span> + hashIncLong);    </span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、multiGet(H key, Collection&lt;HK&gt; hashKeys) </span><br><span class="line">    <span class="comment">//以集合的方式获取变量中的值。 </span></span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();   </span><br><span class="line">	list.add(<span class="string">&quot;map1&quot;</span>);   </span><br><span class="line">	list.add(<span class="string">&quot;map2&quot;</span>);   </span><br><span class="line">	List mapValueList = redisTemplate.opsForHash().multiGet(<span class="string">&quot;hashValue&quot;</span>,list);  </span><br><span class="line">	System.out.println(<span class="string">&quot;通过multiGet(H key, Collection&lt;HK&gt; hashKeys)方法以集合的方式获取变量中的值:&quot;</span>+mapValueList);    </span><br><span class="line"></span><br><span class="line"><span class="number">11</span>、putAll(H key, Map&lt;? extends HK,? extends HV&gt; m)  </span><br><span class="line">    <span class="comment">//以map集合的形式添加键值对。 </span></span><br><span class="line">    Map newMap = <span class="keyword">new</span> HashMap();   </span><br><span class="line">	newMap.put(<span class="string">&quot;map3&quot;</span>,<span class="string">&quot;map3-3&quot;</span>);   </span><br><span class="line">	newMap.put(<span class="string">&quot;map5&quot;</span>,<span class="string">&quot;map5-5&quot;</span>);   	</span><br><span class="line">	redisTemplate.opsForHash().putAll(<span class="string">&quot;hashValue&quot;</span>,newMap);   </span><br><span class="line">	map = redisTemplate.opsForHash().entries(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过putAll(H key, Map&lt;? extends HK,? extends HV&gt; m)方法以map集合的形式添加键值对:&quot;</span> + map);    </span><br><span class="line"></span><br><span class="line"><span class="number">12</span>、putIfAbsent(H key, HK hashKey, HV value) </span><br><span class="line">    <span class="comment">//如果变量值存在，在变量中可以添加不存在的的键值对，如果变量不存在，则新增一个变量，同时将键值对添加到该变量。 </span></span><br><span class="line">    redisTemplate.opsForHash().putIfAbsent(<span class="string">&quot;hashValue&quot;</span>,<span class="string">&quot;map6&quot;</span>,<span class="string">&quot;map6-6&quot;</span>);   </span><br><span class="line">	map = redisTemplate.opsForHash().entries(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过putIfAbsent(H key, HK hashKey, HV value)方法添加不存在于变量中的键值对:&quot;</span> + map);    </span><br><span class="line"></span><br><span class="line"><span class="number">13</span>、scan(H key, ScanOptions options) </span><br><span class="line">	<span class="comment">//匹配获取键值对，ScanOptions.NONE为获取全部键对</span></span><br><span class="line">    ScanOptions.scanOptions().match(<span class="string">&quot;map1&quot;</span>).build()     </span><br><span class="line">    <span class="comment">//匹配获取键位map1的键值对,不能模糊匹配。 </span></span><br><span class="line">    Cursor&lt;Map.Entry&lt;Object,Object&gt;&gt; cursor = redisTemplate.opsForHash().scan(<span class="string">&quot;hashValue&quot;</span>,ScanOptions.scanOptions().match(<span class="string">&quot;map1&quot;</span>).build());  </span><br><span class="line">*<span class="comment">//Cursor&gt; cursor = redisTemplate.opsForHash().scan(&quot;hashValue&quot;,ScanOptions.NONE);*   </span></span><br><span class="line"><span class="keyword">while</span> (cursor.hasNext())&#123;    </span><br><span class="line">    Map.Entry&lt;Object,Object&gt; entry = cursor.next();    </span><br><span class="line">    System.out.println(<span class="string">&quot;通过scan(H key, ScanOptions options)方法获取匹配键值对:&quot;</span> + entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());  </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="number">14</span>、delete(H key, Object... hashKeys) </span><br><span class="line">    <span class="comment">//删除变量中的键值对，可以传入多个参数，删除多个键值对。 	</span></span><br><span class="line">    redisTemplate.opsForHash().delete(<span class="string">&quot;hashValue&quot;</span>,<span class="string">&quot;map1&quot;</span>,<span class="string">&quot;map2&quot;</span>);   </span><br><span class="line">	map = redisTemplate.opsForHash().entries(<span class="string">&quot;hashValue&quot;</span>);   </span><br><span class="line">	System.out.println(<span class="string">&quot;通过delete(H key, Object... hashKeys)方法删除变量中的键值对后剩余的:&quot;</span> + map); </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>头晕不💫，慢慢看吧👀,多刷几遍，就懂了😁</p>
</blockquote>
<hr>
<h4 id="Hash-mapping">Hash mapping</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现object与Map&lt;K,V&gt;相互转换</span></span><br><span class="line"><span class="comment">//法1.ObjectHashMapper</span></span><br><span class="line">这个对象返回的是字节类型的Hashmap，所以还是使用Jackson2HashMapper吧</span><br><span class="line"></span><br><span class="line"><span class="comment">//法2.Jackson2HashMapper</span></span><br><span class="line">HashMapper&lt;Object,String,Object&gt; hashMapper = <span class="keyword">new</span> Jackson2HashMapper(<span class="keyword">false</span>);</span><br><span class="line">Map&lt;String, Object&gt; hash = hashMapper.toHash(user);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>server</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Request-and-Response</title>
    <url>/2020/09/11/Request-and-Response/</url>
    <content><![CDATA[<h2 id="Get请求">Get请求</h2>
<p><code>Get</code>请求✉️的参数是<code>Get</code>请求的附带信息，不再请求体内，而在请求体外，<code>Post</code>请求才是在请求体内</p>
<p>那为什么还用获取<code>Get</code>请求参数还需要用到<code>Request</code>对象呢❓</p>
<a id="more"></a>
<p>通过查询源码📜，知道原来获取<code>the query string or posted form data</code>都需要通过<code>Request</code>对象的<code>getParameter</code>方法来获取的，而如果时<code>Post</code>请求数据，则一般通过<code>Request</code>对象的<code>getInputStream</code>或<code>getReader</code>方法来实现</p>
<h2 id="使用HttpUrlConnection来实现Get-Post请求">使用HttpUrlConnection来实现Get/Post请求</h2>
<p>发现<code>Get</code>请求使用<code>connection</code>方法来实现发送请求📧需要开启和关闭，但是<code>Post</code>却不用，那到底是什么原因呢❓，原来<code>Post</code>请求有<code>DoInput/DoOutput</code>属性，这个属性允许这个连接向服务器自动提交数据和获取数据。所以，一般看到关闭缓存流🌊之类的，其实就在自动发送请求啦</p>
<h2 id="请求方法类型">请求方法类型</h2>
<p>请求的方法类型有<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>等📬，除了在前端页面设置，一般都是在<code>controller</code>层设置它的类型</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SSM架构解析</title>
    <url>/2020/09/05/SSM%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="🔰SSM框架">🔰SSM框架</h3>
<p><code>SSM</code>框架可以分为三个部分来看待，第一部分是<code>springmvc</code>，另一部分为<code>spring</code>的<code>DI</code>和<code>IoC</code>，再一个就是<code>MyBatis</code>了</p>
<p>首先启动项目时，就是先加载<code>web.xml</code>；</p>
<p>监听器&gt;过滤器&gt;<code>Servlet</code></p>
<p>所以监听器会先加载<code>Spring</code>容器的配置文件</p>
<a id="more"></a>
<p>然后过滤器把请求的内容设置为同意的字符编码之类的设置</p>
<p>最后才是<code>Servlet</code>拦截器拦截请求，到<code>SpringMVC</code>中处理</p>
<hr>
<h4 id="🍃Spring部分：">🍃Spring部分：</h4>
<p><a href="https://www.zhihu.com/question/23277575"><code>DI</code>和<code>IoC</code>的简单解释</a></p>
<p><code>DI</code>:依赖注入就是让对象之间的耦合性减少，让每个对象更加灵活，便于修改；</p>
<p><code>IoC</code>:就是把创建对象的主体又程序员转为<code>Spring</code>或其他控制反转容器</p>
<p><code>ApplicationContext</code>就是一个控制反转容器</p>
<p><code>ApplicationContext</code>里面都是一个个<code>bean</code>，也就是对象</p>
<p><code>bean</code>的<code>property</code>属性对应对象的setter方法注入实例化；而<code>constructor-arg</code>属性对应对象的构造器方法实例化</p>
<hr>
<h4 id="🌀Springmvc">🌀Springmvc</h4>
<p><img src="/assets/img/image-20200518131134856.png" alt="请求响应流程图"></p>
<p>当用户在浏览器点击链接或提交表单的时候，请求就开始工作了</p>
<p>请求的第一站会通过一个其前端控制器，<code>SSM</code>这里就是<code>DispacherServlet</code>；</p>
<p>然后第二站，<code>DispacherServlet</code>会将请求发送给<code>SpringMVC</code>控制器（<code>Controller</code>）。控制器是一个用于处理请求的<code>Spring</code>组件。一般都会有多个控制器，这时候，<code>DispacherServlet</code>就会查询一个会多个处理映射器来找到那个控制器；</p>
<p>第三站，到了控制器，请求会卸下器负载（也就是请求的信息）兵等待控制器处理</p>
<p>到了第四站，控制器在完成处理后，会产生一些信息，这些信息要返回给用户并在浏览器显示。这些信息被称为模型（<code>model</code>）。当然还有一个视图名来代表视图，所以控制器最后一件事就是将请求连同模型和视图名发送回<code>DispacherServlet</code></p>
<p>然后到了第五站，<code>DispacherServlet</code>有视图解析器，它将逻辑视图名匹配为一个特定的视图实现</p>
<p>然后就是第六站，<code>DispacherServlet</code>将模型数据渲染到视图上</p>
<p>第七步就是视图通过响应对象传递给客户端</p>
<hr>
<h4 id="☁️Mybatis">☁️Mybatis</h4>
<p>事务控制：就是让数据库的更新能够具备事务的四种原则：原子性、隔离性、一致性、持续性；这样就可以使数据库的更新不出现脏读幻读等情况。</p>
<p>数据源：一般用<code>C3P0</code>来管理，实现连接数据库可以一次性多次连接多次提交等</p>
<p>扫描器（<code>MapperScannerConfigurer</code>）扫描所有的<code>Dao</code>接口实现，加入到<code>IoC</code>容器中</p>
<p><code>SqlSessionFactory</code>可以配置<code>Spring</code>和<code>MyBatis</code>的整合</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架知识点</title>
    <url>/2020/09/11/SSM%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="SSM框架涉及到的知识点">SSM框架涉及到的知识点</h2>
<ol>
<li>
<p><strong>group id 和 artifact id</strong></p>
<p>创建maven项目，group id 和 artifact id都是必须要填写的，因为项目位置就是通过这两个id去查找的，group id 一般分为多个段，第一段为域，第二段为公司名称（这里就说两段而已）。<a id="more"></a>域又分为org、com、cn等；</p>
<p>而artifact id 一般为项目名称</p>
</li>
<li>
<p><strong>facet 定义了 java ee 项目的特性和要求</strong></p>
<p>一般创建一个maven项目，都没有web.xml文件，这是因为该项目还不是一个动态web项目，需要指定一下其特性，也就是下面得Project facets属性</p>
</li>
<li>
<p><strong>applicationContext配置</strong></p>
<p>属性配置中可用value来获取一些相对目录的数值或文件</p>
</li>
<li>
<p><strong>&lt;mvc:annotation-driven&gt;</strong></p>
<p>&lt;mvc:annotation-driven&gt;标签其实就是分发请求给controller方法，它能够映射请求URL和参数给响应的controller方法。</p>
</li>
<li>
<p><strong>&lt;context:component-scan&gt;</strong></p>
<p>&lt;context:component-scan&gt;则是扫描指定包下的类并注册这些包下的被注解标记的组件为Spring的bean</p>
</li>
<li>
<p><strong>jdbcUrl</strong></p>
<p><code>JDBC URL: jdbc:mysql://&lt;host&gt;&lt;port&gt;/&lt;database_name&gt;</code></p>
<p>默认端口3306，如果服务器使用默认端口则port可以省略</p>
<p>MySQL Connector/J Driver 允许在URL中添加额外的连接属性</p>
<p><code>jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;?property1=value1&amp;property2=value2</code></p>
</li>
<li>
<p><strong>SqlSessionFactoryBean</strong></p>
<p>正如SqlSessionFactoryBean的名字，它是生产SqlSessionFactory的工厂Bean；SqlSessionFactory是一种生产SqlSession的工厂；SqlSession是代表数据库连接客户端和数据库Server之间的会话信息；SqlSession实现发送sql语句，管理事务和获取mapper；</p>
<p>SqlSession是关联到具体数据库连接的，但是如果每次创建和销毁都直接操作物理连接的话，那么这个资源浪费很高，效率很低。</p>
<p>使用数据库连接池时，关闭SqlSession实例 ，其实只是把数据库连接对象（代表物理资源）放回到对象池中，并没有直接销毁，使用连接池技术极大提高了物理资源利用率，缩减了创建物理连接所需的时间、资源等等</p>
<p>相关知识点出处<a href="https://www.jianshu.com/p/f19a58938959">在这里</a></p>
</li>
<li>
<p><strong>关于mapper映射的详解</strong></p>
<p>还不是很懂接口和mapper映射之间如何做到关联的</p>
<p>通过 <a href="Mybatis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.md">Mybatis从入门到精通</a> 可大概了解。dao层的接口和mapper映射是通过动态代理来实现的。只要在SpringIoC容器中实现mapperScannerConfigurer类就行，这个mapper其实解释起来比较复杂，因为spring帮忙做了很多事，首先就是调用接口可以直接调用到mapper.xml里面的数据库语句；这个就是mybatis里面的动态代理；但是mapper接口要实现这个功能，还需要实现类，这个实现类可以获取到sqlsessionfactory来获取session后调用mapper接口，然后mapperScannerConfigurer可以一次性扫描多个接口，并实现这个接口生成实现类</p>
<p>参考文档在<a href="http://mybatis.org/spring/zh/mappers.html">这里</a></p>
</li>
<li>
<p><strong>事务管理/声明式事务管理</strong></p>
<p>事务管理需要数据库的连接，所以一定要导入数据源；</p>
<p>声明式事务管理有两种，一种是基于tx和aop命名空间的xml配置文件；一种是基于@Transactional注解</p>
<p>相关参考文档在<a href="https://blog.csdn.net/donggua3694857/article/details/69858827">这里</a></p>
</li>
<li>
<p><strong>aop和tx在事务方面的理解</strong></p>
<p>对于tx在applicationContext中出现，我一直不理解它是何物，现在知道了</p>
<p>&lt;tx:advice&gt;其实就是aop的通知，而&lt;tx:attributes&gt;和&lt;tx:method&gt;其实就是针对service里面的方法设置的事务管理属性，也不知道对不对。。。。。<strong>待续！！！</strong></p>
<p>我觉得是对的，哭了😭😭</p>
</li>
<li>
<p><strong>&lt;aop:poincut&gt;<strong>中的</strong>expresstion</strong></p>
<p>比如这一个<code>execution(* cn.lj.service..*(..))</code>，第一个<code>*</code>表示返回值，这里表示任意；然后是包service；然后是service下类的任意方法，就是那个<code>*</code>，最后<code>(..)</code>是所有参数</p>
<p>最靠近<code>(..)</code>的为方法名,靠近<code>.\*(..))</code>的为类名或者接口名,如上例的JoinPointObjP2.*(…))</p>
<p><a href="https://blog.csdn.net/kkdelta/article/details/7441829">相关内容链接</a></p>
</li>
<li>
<p><strong>启动项目失败，无法找到applicationContext.xml</strong></p>
<p>我觉得很奇怪，刚开始是因为resources文件夹没写对，然后修改以后还是不行，最后发现，我的项目之前是jar	类型而不是war类型，所以才一直不成功的</p>
</li>
<li>
<p><strong>Spring Aop</strong></p>
<p>&lt;aop:aspect&gt;是面向切面编程；而&lt;aop:advisor&gt;则是进行事务管理，但二者的实现原理都是一样的</p>
</li>
<li>
<p><strong>&lt;mvc:annotation-driven&gt;</strong></p>
<p>这个东西是干嘛用的？其实讲起来挺麻烦的，简单点就是实现请求的映射，也就是完成对requestmapping这个注解的实现，同时还有请求参数等的设置（比如:@param）都是通过它来实现</p>
</li>
<li>
<p><strong>java properties file</strong></p>
<p>我想通过<code>&lt;context:property-placeholder /&gt;</code>动态引入一些数据库连接属性，但是一直报错，无法解析；最后发现原来是我的文件名写错了，因为一般java的属性文件都是以“properties”结尾的，但是我拼措了；</p>
<p><strong>！！！怎么说，发现spring里面很多配置的东西都需要特别注意名字</strong></p>
</li>
<li>
<p><strong>Spring单元测试</strong></p>
<p>使用spring的测试模块，需要导入spring-test包</p>
</li>
<li>
<p><strong>单元测试Mybatis</strong></p>
<p>记得在SpringIoC容器中添加mapperscannerconfigurer这个bean，不然无法使用dao层里面的接口，因为<code>&lt;context:component-scan&gt;</code>扫描不包括dao层。</p>
</li>
<li>
<p><strong>@Autowired</strong></p>
<p>spring可以实现控制反转，就是实例化对象，但是如果对象里面有属性呢？那就用注解@autowired 直接注入属性</p>
</li>
<li>
<p><strong>bean作用域singleton和prototype的区别</strong></p>
<p>singleton：容器在初始化时，就会创建对象；单例也支持延迟加载（就是只有在请求时再生成）；</p>
<p>prototype：容器在初始化时，不创建对象，只是在每次使用时（每次容器获取对象时）再创建对象；并且每次获取对象都会创建一个新的对象；</p>
</li>
<li>
<p><strong>Bean的生命周期不同于IoC容器等的生命周期</strong></p>
<p>Bean的生命周期：创建—初始化（实例化）—销毁</p>
<p>容器生命周期：初始化—使用—销毁</p>
</li>
<li>
<p><strong>取余方法可以用来筛选数</strong></p>
<p>比如筛选“小于20”的数，就可以用取余方法，我是在使用任意对象取值时遇到的；如下：int value = random.nextInt()%20</p>
</li>
<li>
<p><strong>random对象</strong></p>
<p>取任意值的时候，放在方法里面的数,比如value，只会取“0到value-1”这个范围的数。</p>
</li>
<li>
<p><strong>graphics对象</strong>（图形上下文）</p>
<p>graphics是可以用来对几何图形的坐标转换，颜色管理和文本布局的操作的。比如在里面画线画点写字都可以，我是用来构建验证码的。image通过方法getGraphics()可获取到这个对象</p>
</li>
<li>
<p><strong>bufferimage对象</strong></p>
<p>这个对象只是image对象的子类，但是带有缓冲区，可以自由的操作修改，一般通过getGraphics()获取到图形的上下文对象后进行各个方面的修改。</p>
</li>
<li>
<p><strong>上传文件</strong>–(相关包:common-fileupload.jar)</p>
<p>请求request里面有multipartFiles，但是，一直取不到里面的值；然后通过debug看，requestl里面不止有它呢，还有其他很多。通过封装对象，把multipartFile封装到对象newuser中的属性(List<MultipartFile>)files中，然后返回newuser值后调用它的方法获取files[0]，就可以获取里面MultipartFile类型的值;</p>
<p>关于之前request里面的值,仔细查看这个request，发现它是DefaultMultipartHttpServletRequest,所以只要把请求改为它，就可以获取到里面的MultipartFiles了</p>
</li>
<li>
<p><strong>上传下载路径设置</strong></p>
<p>利用请求<code>request.getServletContext().getRealPath(&quot;/upload/&quot;);</code>获取到得这个文件路径很奇怪，结果是<code>C:\Users\llj\eclipse-workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\demo2\upload\</code>所以我当初在项目里面找是找不到的，后面使用String直接设置，简单明了；</p>
</li>
<li>
<p><strong>下载要点</strong></p>
<p>下载比上传复杂点，都要设置ContentType和请求头的Content-Disposition属性，有两种方法：</p>
<p>法一：直接在响应中设置文件，需要使用到这个方法<em>Files.copy(要下载的文件的路径,响应的输出流)</em></p>
<p>法二：（使用Spring框架）返回值为ResponseEntity&lt;byte[]&gt;</p>
</li>
<li>
<p><strong>spring配置redis</strong></p>
<p>使用1.8版本及以下版本，配置redistemplate时，用jedisConnectionFactory时，可以直接配置ip和port，poolconfig;但是高于1.8版本我就找不到这个东西了</p>
</li>
<li>
<p><strong>关于maven pom文件中 scope的分类</strong></p>
<p>网友关于这些分类的<a href="https://www.cnblogs.com/molao-doing/articles/Maven.html">解释</a></p>
<ul>
<li>默认是<strong>compile</strong>，表示被依赖需要参与当前项目的编译，测试、运行也一样参与其</li>
<li><strong>runtime</strong>表示依赖包无需参与项目的编译，但是测试和运行周期参与其中。（也就是跳过编译）</li>
<li><strong>test</strong>表示在一般的编译和运行时都不需要，只有在测试编译和运行阶段才用到。</li>
<li><strong>provided</strong>表示该依赖已经提供，旨在未提供时才被使用。</li>
<li><strong>system</strong>表示该依赖不会从maven仓库下载，而是从本地系统指定路径下寻找。</li>
<li><strong>import</strong>仅支持在<code>&lt;dependencyManagement&gt;</code>中的类型依赖项上使用。表示要在指定POM中用有效的依赖关系列表替换的依赖关系。</li>
</ul>
</li>
<li>
<p><strong>&lt;mvc:resource&gt;</strong></p>
<p>出现一个很奇怪的问题😓，为什么我的html文件调不了css文件呢？bootstrap的css文件可以访问，我自己写的common.css文件就不行？貌似不是，我在servlet容器中定义了<a href="mvc:default-servlet-handler">mvc:default-servlet-handler</a>了，而且bootstrap的css等文件也可以访问了，但是为何就那一个文件访问不了？图片也访问不了</p>
<p>所以我就只能在在Servlet容器中再设置<code>&lt;mvc:resource&gt;</code>这个静态资源直接映射了。这样的话，就需要全部设置我的静态资源了，但是这个<code>&lt;mvc:resource&gt;</code>有个好处，就是它可以设置在任何地方。任君设置。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 注解分析</title>
    <url>/2020/09/04/Spring-%E6%B3%A8%E8%A7%A3%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="Autowired">@Autowired</h3>
<p>🍃<code>Spring</code>可以实现控制反转，就是实例化对象，但是如果对象里面有属性呢？那就用注解<code>@autowired </code>直接注入属性(实例化的对象)，这样就实现了解耦🙉，<code>Controller、Service、Dao</code>等分层就是基于此。</p>
<ul>
<li><code>bean</code>作用域<code>singleton</code>和<code>prototype</code>的区别</li>
</ul>
<p><code>singleton</code>：容器在初始化时，就会创建对象；单例也支持延迟加载（就是只有在请求时再生成）；</p>
<a id="more"></a>
<p><code>prototype</code>：容器在初始化时，不创建对象，只是在每次使用时（每次容器获取对象时）再创建对象；并且每次获取对象都会创建一个新的对象；</p>
<blockquote>
<p><code>@Resource</code>—它其实跟<code>@Autowired</code>效果一样，只不过它是根据<code>name</code>来注入实例化对象的，而Autowired则根据<code>id</code></p>
</blockquote>
<hr>
<h3 id="ResponseBody">@ResponseBody</h3>
<p><code>@responseBody</code>注解的作用是将<code>controller</code>中的方法返回的数据，通过适当的转换器转换为指定的格式之后，写入到<code>response</code>对象的<code>body</code>区，通常用来返回<code>JSON</code>数据或者是<code>XML</code>数据😵</p>
<p>需要注意的是，在使用此注解之后不会再走<strong>视图处理器</strong>这个流程，而是直接将数据写入到<strong>输入流</strong>中😁，也就是说，只返回数据而不是页面，他的效果等同于通过<code>response</code>对象输出指定格式的数据。</p>
<hr>
<h3 id="测试三件套👺">测试三件套👺</h3>
<h4 id="Test、-ContextConfiguration、-Runwith"><em>@Test、@ContextConfiguration、@Runwith</em></h4>
<p>我想使用<code>@Test</code>测试来完成注解形式的<code>SpringIoC</code>，但是测试无法实现，使用<code>Java Application</code>就可以实现！原来测试初始化IoC容器可以用<code>@ContextConfiguration</code>这个注解，不管是<code>XML</code>形式还是注解形式的IoC容器。</p>
<p><code>@ContextConfiguration</code>和<code>@Runwith</code>二者一般不分开，一个是用于导入测试使用的测试库函数，一个用于加载配置文件，也就是加载配置<code>XML</code>文件或者<code>Java文件</code>（使用<code>@Configuration</code>标注配置<code>java</code>类文件），用以导入某些<code>Spring</code>容器的<code>bean</code>对象。</p>
<blockquote>
<p>详情请看：<strong>/demo2/src/main/java/cn/lj/test/addusertest.java</strong>🐾</p>
</blockquote>
<p>如果需要加载spring容器，可以在<code>@ContextConfiguration</code>中加载<code>Spring</code>容器后，用于实例化<code>Spring容器</code>对象</p>
<blockquote>
<p>示例：/wx/src/main/java/cn.lj.wx.utils.CreateUtils方法🐾</p>
</blockquote>
<hr>
<h3 id="Component">@Component</h3>
<p>新建一个<code>Utils</code>类🎸，有个属性<code>token</code>和两个方法，在其他类通过<code>@Autowired</code>注入这个类对象时，一直报没有这个bean对象，很奇怪，最后把属性token去掉就可以了。原来在引入<code>bean</code>对象时，需要配置好他的属性，所以只要属性设置好<code>Getter/Setter</code>方法就可以使用<code>Autowired</code>自动装配了</p>
<p>最好还是不要设置属性吧💅，或者直接使用<code>@Autowired</code>或<code>@Resource</code>注入属性(跟<code>Controller</code>、<code>Service</code>一样)，就可以直接把这个类设为<code>component</code>类，让其他类可以调用。</p>
<hr>
<h3 id="Data、-Getter">@Data、@Getter</h3>
<p>省略对象get/set方法的编写，省略无参构造函数的编写，怎么做到呢？那当然要使用<span class="ljspan ljspan-blue"><a href="https://objectcomputing.com/resources/publications/sett/january-2010-reducing-boilerplate-code-with-project-lombok">lombok</a></span></p>
<h4 id="配置">配置</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解Get/Set等方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下载安装lombok的插件">下载安装<code>lombok</code>的插件</h4>
<p>其实就是下载<span class="ljspan ljspan-blue"><a href="https://projectlombok.org/all-versions">lombok.jar</a></span>后，打开它，弹出安装界面，然后在打开的界面中指定你的eclipse安装的根目录后安装/更新，最后安装完成之后，请确认eclipse安装路径下是否多了一个lombok.jar包，并且其配置文件eclipse.ini中是否 添加了如下内容:-javaagent:path\to\lombok.jar</p>
<p>具体操作步骤可<a href="https://www.cnblogs.com/boonya/p/10691466.html">参考博主</a>的安装步骤</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda用法</title>
    <url>/2020/09/08/Conda%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="conda是一个包管理、环境管理工具⚙️">conda是一个包管理、环境管理工具⚙️</h3>
<p>一般，miniconda只针对python🐍这个环境，而anaconda其实就比较全面，可以用于多个编程语言的环境管理，比如R语言，JavaScript等等</p>
<a id="more"></a>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">安装路径：/home/xxx/miniconda3</span><br><span class="line"></span><br><span class="line">退出命令：conda deactivate env_name</span><br><span class="line"></span><br><span class="line">删除环境：conda env <span class="builtin-name">remove</span> env_name</span><br><span class="line"></span><br><span class="line">显示环境列表：conda env list</span><br><span class="line"></span><br><span class="line">如果创建环境，使用指定路径的方式，命令如下</span><br><span class="line"></span><br><span class="line">conda create <span class="attribute">-p</span>=path/env_name <span class="attribute">python</span>=python_version</span><br><span class="line"></span><br><span class="line">那么开启这个环境的方法：conda activate path/env_name</span><br><span class="line"></span><br><span class="line">同理，删除这个环境的方法就是conda env <span class="builtin-name">remove</span> -p /path/env_name</span><br></pre></td></tr></table></figure>
<p>这样的话，该环境就指定了特定的路径，但是名称却为空，暂时还找不到如何改名字的方法，也就是说，在创建环境的时候，要么指定路径，要么指定名称（路径规定只在path/miniconda/env中）</p>
<p>💥解决方法:是使用<span class="label success">软链接</span>把路径引入path/miniconda/env/env_name中，就可以了，like the picture show below.</p>
<p><img src="/assets/img/Conda%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.png" alt=""></p>
<hr>
<p>有时候，使用python无法下载某些包，或者下载速度很慢，这是因为conda下载包是使用国外的网址来下载的，可以修改配置，使用国内的镜像</p>
<p>清华👨‍🎓镜像内容和修改方法在<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">这里</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat的下载和配置</title>
    <url>/2020/09/08/Tomcat%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>在Linux上安装tomcat，其实跟window一样，配置JDK、配置环境变量等等，只不过配置路径和文件名不同而已😘</p>
<a id="more"></a>
<hr>
<h3 id="下载配置jdk">下载配置jdk</h3>
<p>很难，试过用apt-get/apt使用ppa源安装，失败；使用系统推荐的openjdk安装也失败；最后只能采用下载bin来解压安装，才能成功</p>
<div class="note default">
            <h4 id="Note">Note:</h4><p>在oracle官网下载jdk时，可以直接搜索jdk archive来下载，不过需要登陆oracle账号！</p>
          </div>
<blockquote>
<p>安装好jdk需要配置好环境变量</p>
</blockquote>
<p>如果只想配置用户变量，就在文件~/.bashrc中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/path/to/java</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>如果想直接设置为环境变量那便把上面的设置添加到/etc/profile文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试java是否安装配置完成</span></span><br><span class="line"><span class="variable">$java</span> -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_252&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~16.04-b09)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)</span><br><span class="line"><span class="comment">#有上面的文段证明安装完成</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="下载配置tomcat">下载配置tomcat</h3>
<p>配置教程在<a href="https://blog.csdn.net/jenyzhang/article/details/70159769">这里</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzvf apache-tomcat.xxx.tar.gz</span><br><span class="line"><span class="comment">#配置环境变量</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment">#tomcat</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/path/to/tomcat </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动tomcat</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/tomcat</span><br><span class="line">./bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试tomcat配置成功与否,用浏览器登录下看看</span></span><br><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure>
<p>这里配置安装的tomcat还不是很完整，比如说，没有服务，每次开机都去tomcat文件夹去找，很麻烦，而且有些软件需要使用到systemctl来启动tomcat服务，比如OpenElis</p>
<p>解决办法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/tomcat目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改startup.sh</span></span><br><span class="line"></span><br><span class="line">vim ./startup.sh</span><br><span class="line"><span class="comment">#添加如下</span></span><br><span class="line"><span class="comment">#set java environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/path/to/java</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tomcat</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/path/to/tomcat</span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$PRGDIR</span>&quot;</span>/<span class="string">&quot;<span class="variable">$EXECUTABLE</span>&quot;</span> start <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册tomcat服务</span></span><br><span class="line">sudo cp /path/to/tomcat/bin/catalina.sh /etc/init.d/tomcat</span><br><span class="line"><span class="comment">#修改catalina.sh</span></span><br><span class="line">vim catalina.sh</span><br><span class="line"><span class="comment">#添加如下</span></span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java目录</span><br><span class="line">CATALINA_HOME=/path/to/tomcat</span><br><span class="line"></span><br><span class="line">在<span class="comment">#!/bash/sh下方直接添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Provides:          tomcat</span></span><br><span class="line"><span class="comment"># Required-Start:    $remote_fs $network</span></span><br><span class="line"><span class="comment"># Required-Stop:     $remote_fs $network</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: The tomcat Java Application Server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新注册tomcat服务</span></span><br><span class="line">sudo update-rc.d tomcat defaults</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在就可以使用tomcat服务了</span></span><br><span class="line">sudo systemctl status tomcat </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04设置开机自启动</title>
    <url>/2020/09/08/Ubuntu18-04%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<div class="note info">
            <h4 id="Note1">Note1:</h4><p>由于新版ubuntu不再使用<strong>initd</strong>管理系统，而改用<strong>systemd</strong>;</p><p>故用systemctl命令来替换了<strong>service</strong>和<strong>chkconfig</strong>的功能</p><p>系统开机启动，systemd默认读取<code>/etc/systemd/system</code>下的配置/该目录下的文件会链接<code>lib/systemd/system/</code>下的文件</p>
          </div>
<a id="more"></a>
<div class="note info">
            <h4 id="Note2">Note2:</h4><p>sh的脚本，脚本开头的#!+shell，这里的shell一般有sh和bash，而sh其实是‘bash --posix’的变体，二者是一样的，这么看来，sh其实是bash的一种标准😳</p>
          </div>
<h2 id="开始配置">开始配置</h2>
<blockquote>
<p>我的自定义启动文件是rc-local.service，直接修改它</p>
</blockquote>
<h4 id="配置rc-local-service">配置rc-local.service</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  SPDX-License-Identifier: LGPL-2.1+</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  This file is part of systemd.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This unit gets pulled automatically into multi-user.target by</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemd-rc-local-generator <span class="keyword">if</span> /etc/rc.local is executable.</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">Documentation=man:systemd-rc-local-generator(8)</span><br><span class="line">ConditionFileIsExecutable=/etc/rc.local</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">GuessMainPID=no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里是需要添加的部分</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=rc-local.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一般正常的启动文件主要分成三部分💦</p>
<p><em>[Unit]</em> 段: <span class="label info">启动顺序与依赖关系</span></p>
<p><em>[Service]</em> 段: <span class="label warning">启动行为,如何启动,启动类型</span></p>
<p><em>[Install]</em> 段: 定义如何安装这个配置文件，即<span class="label success">怎样做到开机启动</span></p>
<h4 id="配置rc-local">配置rc.local</h4>
<p>Ubuntu18.04默认没有<code>/etc/rc.local</code>这个文件，需要自己创建</p>
<p>如下👇：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/sh -e</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rc.local</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class="line"><span class="comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class="line"><span class="comment"># value on error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to enable or disable this script just change the execution</span></span><br><span class="line"><span class="comment"># bits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default this script does nothing.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this just a test&quot;</span> &gt; /home/luoj/testdir/text.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="设置开机自启动">设置开机自启动</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加可执行权限</span></span><br><span class="line">sudo chmod +x /etc/rc.local</span><br><span class="line"><span class="comment">#添加rc-local.service软连接到/etc/systemd/system</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> rc-local</span><br><span class="line"><span class="comment">#启动这个服务</span></span><br><span class="line">sudo systemctl start rc-local.service</span><br><span class="line"><span class="comment">#查看这个服务</span></span><br><span class="line">sudo systemctl status rc-local.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>docker用法</title>
    <url>/2020/09/08/docker%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/assets/img/Docker-wallpaper.jpg" alt=""></p>
<a id="more"></a>
<h2 id="Docker常用命令">Docker常用命令</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建一个容器，必须指定镜像来创建容器</span></span><br><span class="line"></span><br><span class="line">docker run    <span class="comment">#添加 -it  运行交互模式的容器  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-d 以后台模式运行容器</span></span><br><span class="line"><span class="comment">#-P 将所有的公开端口映射到随机端口上</span></span><br><span class="line"><span class="comment">#-p 将容器的端口映射到主机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器，退出容器会关闭容器</span></span><br><span class="line"></span><br><span class="line">docker attach </span><br><span class="line"></span><br><span class="line"><span class="comment">#在现有容器中运行命令的情况</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span>   <span class="comment">#-itd此时退出容器，不会关闭容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已经在运行的容器</span></span><br><span class="line"></span><br><span class="line">docker ps     <span class="comment">#添加 -a  显示所有容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置docker容器自启动</span></span><br><span class="line"><span class="comment">#如果还没有创建容器</span></span><br><span class="line">docker run --restart=always --name=容器名</span><br><span class="line"><span class="comment">#如果已经创建了容器</span></span><br><span class="line">docker update --restart=always 容器名</span><br></pre></td></tr></table></figure>
<blockquote>
<p>docker命令行 的选项列表在<a href="https://docs.docker.com/engine/reference/commandline/run/#options">这里</a>😜</p>
</blockquote>
<hr>
<h2 id="关于docker占用磁盘空间的情况">关于docker占用磁盘空间的情况</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看Docker的磁盘使用情况</span></span><br><span class="line">docker system df </span><br><span class="line"></span><br><span class="line"><span class="comment">#一般有Images（镜像）、Containers(容器)、Local Volumes(数据卷)</span></span><br><span class="line"><span class="comment">#镜像是用来在容器中生成一个实例的，当重新用容器生成一个镜像的时候，就是另一个新的实例，之前的数据都会没有了，因为是新的实例嘛，而之前的实例数据其实是存放在数据卷里面的！</span></span><br><span class="line"><span class="comment">#数据卷也是实现持久化的关键元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清理磁盘空间  ！！！慎用</span></span><br><span class="line">docker system prune</span><br><span class="line"></span><br><span class="line"><span class="comment">#手动清理Docker镜像/容器/数据卷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有关闭的容器</span></span><br><span class="line">docker ps -a | grep Exit | cut -d <span class="string">&#x27; &#x27;</span> -f 1 | xargs docker rm</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有dangling镜像（即无tag的镜像）</span></span><br><span class="line">docker rmi $(docker images | grep <span class="string">&quot;^&lt;none&gt;&quot;</span> | awk <span class="string">&quot;&#123;print <span class="variable">$3</span>&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有dangling数据卷（即无用的Volume）</span></span><br><span class="line">docker volume rm $(docker volume ls -qf dangling=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu创建用户</title>
    <url>/2020/09/09/Ubuntu%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>新建用户不仅仅是新建一个用户而已，还有其家目录的设置和环境变量的设置等等，所以新建用户并没有想象的那么简单😳</p>
<a id="more"></a>
<h2 id="新建用户">新建用户</h2>
<p>有<strong>useradd</strong>和<strong>adduser</strong>两种方法哦🙊</p>
<blockquote>
<p>那么如何选择呢？根据系统来咯确定系统</p>
</blockquote>
<p>如果是ubuntu(我的就是😏),那么useradd和adduser是不一样的</p>
<p>adduser可以为新建用户自动创建跟用户名同名的用户目录，组名，系统shell版本，同时会提示输入密码之类的。</p>
<p>而useradd在创建用户时，不会自动创建目录，也不会自动选择shell版本，也没有设置密码，所以需要使用passwd命令修改密码</p>
<blockquote>
<p>而在其他系统上还没试验过</p>
</blockquote>
<hr>
<h2 id="已建用户">已建用户</h2>
<p>如果是已建用户，但是你丢失了某些东西？比如你误删了家目录😂，那还需要新建用户吗？</p>
<p>有一次因为失误，删了家目录及其子目录的所有数据👻</p>
<p>那如何新建家目录呢。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>skec<span class="regexp">/* /</span>path<span class="regexp">/to/u</span>ser -A </span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个命令的意义就是把shell等一些配置文件复制到我的用户目录中</p>
</blockquote>
<hr>
<h2 id="问题">问题</h2>
<p>如果在创建用户的时候没有设置主目录和shell，会出现什么问题呢❔</p>
<p>我暂时还不知道，网上搜不到这种问题😐</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>apt-get用法</title>
    <url>/2020/09/08/apt-get%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>apt-get是ubuntu等系统独有的一个软件包安装工具，apt其实也是一样的，只不过，我习惯用apt-get。不适用于centos哦！💁</p>
<a id="more"></a>
<h2 id="命令：">命令：</h2>
<blockquote>
<p>下列是apt-get的命令选项</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update - 取回更新的软件包列表信息     **<span class="comment">#只检查更新软件包，不更新软件**</span></span><br><span class="line"></span><br><span class="line">upgrade - 进行一次升级   **<span class="comment">#真正的更新软件**</span></span><br><span class="line"></span><br><span class="line">install - 安装新的软件包(注：软件包名称是 libc6 而非 libc6.deb)</span><br><span class="line"></span><br><span class="line">remove - 卸载软件包</span><br><span class="line"></span><br><span class="line">autoremove - 卸载所有自动安装且不再使用的软件包</span><br><span class="line"></span><br><span class="line">purge - 卸载并清除软件包的配置</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> - 下载源码包文件</span><br><span class="line"></span><br><span class="line">build-dep - 为源码包配置所需的编译依赖关系</span><br><span class="line"></span><br><span class="line">dist-upgrade - 发布版升级，见 apt-get(8)</span><br><span class="line"></span><br><span class="line">dselect-upgrade - 根据 dselect 的选择来进行升级</span><br><span class="line"></span><br><span class="line">clean - 删除所有已下载的包文件</span><br><span class="line"></span><br><span class="line">autoclean - 删除已下载的旧包文件</span><br><span class="line"></span><br><span class="line">check - 核对以确认系统的依赖关系的完整性</span><br><span class="line"></span><br><span class="line">changelog - 下载指定软件包，并显示其changelog</span><br><span class="line"></span><br><span class="line">download - 下载指定的二进制包到当前目录</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="针对apt-get安装软件失败，网速慢的问题">针对apt-get安装软件失败，网速慢的问题</h2>
<blockquote>
<p>可通过更换apt-get镜像源来解决这个问题</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份原始镜像源</span></span><br><span class="line"></span><br><span class="line">cp /etc/apt/source.list  /etc/apt/source.list.old</span><br><span class="line"></span><br><span class="line"><span class="comment">#更换镜像源地址</span></span><br><span class="line"></span><br><span class="line">vim /etc/apt/source.list</span><br><span class="line"></span><br><span class="line">:%d            <span class="comment">#清空内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制[清华镜像源](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)到/etc/apt/source.list文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新一下配置</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="apt-get安装程序包出现问题（卸载系统自带python3后出现的问题）">apt-get安装程序包出现问题（卸载系统自带python3后出现的问题）</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下为错误内容，可能有多个或至少一个</span></span><br><span class="line">xxx.postinst: xxx: not found</span><br><span class="line">dpkg: 处理软件包 xxx (--configure)时出错:</span><br><span class="line"> 子进程 已安装 post-installation 脚本 返回错误状态 127</span><br><span class="line">在处理时有错误发生:</span><br><span class="line">	xxx</span><br><span class="line">E:Sub-process /usr/bin/dpkg returned an error code (1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决办法：</span></span><br><span class="line">sudo mv /var/lib/dpkg/info /var/lib/dpkg/info_old</span><br><span class="line"></span><br><span class="line">sudo mkdir /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新软件包并修复软件的依赖包</span></span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -f install</span><br><span class="line"></span><br><span class="line">sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old</span><br><span class="line"></span><br><span class="line">sudo rm -rf /var/lib/dpkg/info </span><br><span class="line"></span><br><span class="line">sudo mv /var/lib/dpkg/info_old /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新进入shell</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>最好不要卸载系统自带的python，最多卸载你之前使用apt-get安装的软件，不然可能会出现意想不到的问题😰</p>
</blockquote>
<h2 id="卸载软件-程序">卸载软件/程序</h2>
<blockquote>
<p>我觉得也可以用来删除其他通过apt-get安装的软件！</p>
</blockquote>
<h4 id="示例：完全卸载mariadb">示例：完全卸载mariadb</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先卸载mariadb并删除相关配置文件(datadir目录)</span></span><br><span class="line">sudo apt-get purge mariadb*</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除没用的相关依赖包</span></span><br><span class="line">sudo apt-get automove </span><br><span class="line"></span><br><span class="line"><span class="comment">#验证mariadb服务是否还在</span></span><br><span class="line">sudo service mysql status</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果还是不能够删除!!!</span></span><br><span class="line"><span class="comment">#就直接到apt软件包列表去删除</span></span><br><span class="line">/var/lib/dpkg/info</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Test">Test</h2>
<h3 id="Span">Span</h3>
<p><span class="ljspan ljspan-reverse">生活不止眼前的苟且</span></p>
<h3 id="Blockquotes">Blockquotes</h3>
<!-- Center quote -->
<blockquote class="blockquote-center">
            <p>Something</p>

          </blockquote>
<!-- Tag Alias -->
<blockquote class="blockquote-center">
            <p>Something</p>

          </blockquote>
<h3 id="Label">Label</h3>
<p>Lorem <span class="label default">ipsum</span> <span class="label primary">dolor sit</span> amet, consectetur <span class="label success">adipiscing elit,</span> sed <span class="label info">do eiusmod</span> tempor incididunt ut labore et dolore magna aliqua.</p>
<p>Ut enim <em><span class="label warning">ad</span></em> minim veniam, quis <strong><span class="label danger">nostrud</span></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
<p>Duis aute irure dolor in reprehenderit in voluptate <s><span class="label default">velit</span></s> <mark>esse</mark> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h3 id="Label-Test">Label Test</h3>
<span class="label info">[教程]([https://vuepress.mirror.docker-practice.com/install/mirror.html#ubuntu-16-04-%E3%80%81debian-8-%E3%80%81centos-7](https://vuepress.mirror.docker-practice.com/install/mirror.html#ubuntu-16-04-、debian-8-、centos-7))</span>
<p><strong><span class="label default">&</span></strong></p>
<blockquote>
<p>This 😄😭 is your very first post.</p>
</blockquote>
<h3 id="Span-2">Span</h3>
<p><span class="ljspan ljspan-reverse ljspan-red"><a href="https://hexo.io/">人生有梦，各自精彩！</a></span></p>
<p><span class="ljspan ljspan-red"><a href="https://hexo.io/">人生有梦，各自精彩！</a></span><br>
<span class="ljspan ljspan-reverse ljspan-yellow"><a href="https://hexo.io/">水能载舟，亦能覆舟！</a></span></p>
<p><span class="ljspan ljspan-yellow"><a href="https://hexo.io/">水能载舟，亦能覆舟！</a></span></p>
<h3 id="List">List</h3>
<ul>
<li>我是⭐️菜徐坤</li>
<li>我是菜徐彬</li>
<li>我是菜徐鑫</li>
</ul>
<h3 id="Url">Url</h3>
<p>&lt; <a href="http://www.baidu.com">www.baidu.com</a> &gt;</p>
<h3 id="image">image</h3>
<p><img src="/assets/img/wallhaven-p869pm_1920x1080.png" alt="fantasy food"></p>
<h3 id="Code-Blocks">Code Blocks</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$我是菜徐坤之鑫总牛批</span><br></pre></td></tr></table></figure>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<!-- more  -->
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<!-- more  -->
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<!-- more  -->
]]></content>
  </entry>
  <entry>
    <title>java命令行</title>
    <url>/2020/09/11/java%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<p>试过直接在cmd中直接使用java编译并运行吗？瞧瞧👀？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//搜索某个jar文件，然后通过这个文件中定义的类来运行。</span></span><br><span class="line">java -<span class="function">classpath <span class="title">jarfile</span> <span class="params">(jar中的)</span>class [args]</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="示例：">示例：</h3>
<p>可通过window的cmd命令行来执行。</p>
<p>涉及到的jar包在<code>F:\AA_LLJ\llj\files\liripo_proj\lib</code></p>
<p>以下为案例解释</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#In order to keep GNomEx secure we encrypt the passwords for the mysql users gnomex and gnomexguest. This is done by creating a /properties directory that needs to contain a file called gnomex_tomcat.properties – this file has one line:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#key=zzzzzzzzzz</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#where you specify a combination of upper/lower case letters and numbers (instead of zzzzzzzzz) to use as a key during encryption</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#In my example I will use gnomex$129 as the mysql password for gnomex</span></span><br><span class="line"><span class="comment">#And gnomexguest$129 as the mysql password for gnomexguest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#So:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$CATALINA_HOME</span>/lib</span><br><span class="line"></span><br><span class="line">java –classpath ./gnomex_realm.jar hci.gnomex.security.tomcat.AESEncryption gnomex<span class="variable">$129</span> zzzzzzzzz</span><br><span class="line"></span><br><span class="line">gnomex<span class="variable">$129</span>:963aab6e93a6965b1fad2076f8ec96e5</span><br><span class="line"></span><br><span class="line">java -classpath ./gnomex_realm.jar hci.gnomex.security.tomcat.AESEncryption gnomexguest<span class="variable">$129</span> zzzzzzzzz</span><br><span class="line"></span><br><span class="line">gnomexguest<span class="variable">$129</span>:26fa1aada7c618cbb050fe6d2facd535 </span><br><span class="line"></span><br><span class="line">Now instead of specifying the password directly as gnomex<span class="variable">$129</span> we use the encrypted form: 963aab6e93a6965b1fad2076f8ec96e5</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="示例二：">示例二：</h3>
<p>在20年的第二周日记里有记载关于在window上运行一次java程序编译的过程</p>
<p>在纯java环境中，如何引入jar包后，运行class文件呢，方法<a href="https://www.cnblogs.com/webcyz/p/6551655.html">在这里</a></p>
<p>但是还是出现问题了，出现编码问题，我改变了编码还是出问题</p>
<p><img src="/assets/img/java%E5%91%BD%E4%BB%A4%E8%A1%8C1.png" alt="" title="编码错误"></p>
<p><img src="/assets/img/java%E5%91%BD%E4%BB%A4%E8%A1%8C2.png" alt="" title="奇怪错误"></p>
<p>我也不知道如何解决了，任鹏使用linux系统就没有问题，我在window的命令行上就出现这个“奇怪问题”，无法解决！</p>
<p><span class="ljspan ljspan-red">解决办法</span></p>
<div class="note primary">
            <p>非法字符‘\ufeff’和需要class,interface或enum的错误，其实是编码的问题，采用utf无bom的编码就可以运行了</p>
          </div>
<blockquote>
<p>Note:在notepad++中，utf-8就是utf8无bom格式</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2020/09/11/java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="String字符串判空">String字符串判空</h3>
<p>对于<code>String</code>类型判断它是否为空☝️，要使用<code>isEmpty()</code>这个方法或<code>string==&quot;&quot;</code>，不能用<code>string == Null</code>,因为<code>String</code>是一个对象，不可以判<code>Null</code></p>
<a id="more"></a>
<h3 id="枚举类📓">枚举类📓</h3>
<p><a href="https://www.jianshu.com/p/46dbd930f6a2">参考文档</a></p>
<h3 id="静态类和静态方法">静态类和静态方法</h3>
<p>静态类一定是一个内部类,静态类的属性和方法也都需要时静态的。</p>
<p>静态方法内部的属性都需要时静态的。静态方法可以直接跨类调用。直接引用该类的方法就可以了。</p>
<p><a href="https://www.jianshu.com/p/80b404da976b">参考文档</a></p>
<h3 id="super">super()</h3>
<p>经常在实现无参构造函数的时候遇见这家伙👦，这个<code>super</code>其实代表的是父类对象，通过<code>super</code>可以获取到父类👨的属性、方法和构造函数；</p>
<p>super.属性名                调用父类属性</p>
<p>super.fun_name()        调用符类方法</p>
<p>super()/super(参数)     调用父类构造函数</p>
<h3 id="PrintWriter中write-和print-的区别">PrintWriter中write()和print()的区别</h3>
<p>其实都是输出内容💬，但是<code>print()</code>还可以将各种类型的数据转化成字符串的形式输出。(最后再转换成字节输出)</p>
<h3 id="新建对象🐘">新建对象🐘</h3>
<p>在使用<code>xstream</code>的时候，发现新建对象时后面还可以有代码块，在代码块里面可以调用这个对象的方法获取新建对象所需要的东西（以前真没遇到过这种东西）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义xml对象格式</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> XStream xStream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> XppDriver() &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> HierarchicalStreamWriter <span class="title">createWriter</span><span class="params">(Writer out)</span> </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> PrettyPrintWriter(out) &#123;</span><br><span class="line">				<span class="keyword">boolean</span> cdata = <span class="keyword">true</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startNode</span><span class="params">(String name, Class clazz)</span> </span>&#123;</span><br><span class="line">					<span class="keyword">super</span>.startNode(name, clazz);</span><br><span class="line">				&#125;</span><br><span class="line">				......</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>java集合</title>
    <url>/2020/09/12/java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="集合的知识点">集合的知识点</h2>
<ol>
<li>不论Collection的实际类型如何，它都支持一个iterator（）的方法;一般都是创建子类对象后赋值给父类，这样可以使用更多的方法。</li>
</ol>
<a id="more"></a>
<ol start="2">
<li>
<p>Java集合类库将集合的接口与实现分离。同样的接口，可以有不同的实现。Java集合类的基本接口是Collection接口。而Collection接口必须继承java.lang.Iterable接口。</p>
</li>
<li>
<p>对于map,都知道是键值对，但是跟数组有啥区别？map类型可理解为关联数组，可使用键值对作为下标来获取一个值，正如内置数组类型一样。而关联的本质是元素的值与某个特定键相关联，而并非通过元素在数组中的位置来获取。</p>
<p>方法有：equals(Object o)(比较指定对象与此map的等价性)、hashCode()（返回此map的哈希码）、clear()（从map中删除所有映射）、remove(Object key)（从Map中删除键和关联的值）、put(Object key,Object value)（将指定值与指定键相关联）、putAll(Map t)（将指定Map中的所有映射复制到此map），其中hashMap还有Get()方法</p>
</li>
<li>
<p>对于迭代器Iterator，它是一种设计模式，是一个对象，它可以遍历并选择序列中的对象可用，使用方法iterator（）来生成一个迭代器对象，方法有next()(获得序列中的下一个元素)、hasNext()（检查序列中是否还有元素）、remove()（删除序列中的元素）；</p>
</li>
<li>
<p>List接口有两个子类LinkedList和ArrayList，常用方法有：add(Object e )向集合末尾处添加指定的元素、remove(Object e)将指定元素对象，从集合删除，返回值为被删除的对象、set(int index,Object e)将指定索引处的元素，替换成指定的元素，返回值为替换前的元素、get(int index)获取指定索引处的元素，并返回该元素。</p>
</li>
<li>
<p>对于LindedList, LinkedList实现了List<a href="http://baike.baidu.com/view/159864.htm">接口</a>，允许null元素。此外LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈（stack），队列（queue）或双向队列（deque）。</p>
</li>
<li>
<p>对于ArrayList,ArrayList实现了可变大小的<a href="http://baike.baidu.com/view/209670.htm">数组</a>。它允许所有元素，包括null。ArrayList没有同步(如果多个线程同时访问一个List，则必须自己实现访问同步,LinkedList也是不同步的)。size，isEmpty，get，set方法运行时间为常数。</p>
</li>
<li>
<p>对于Vector, Vector非常类似ArrayList，但是Vector是同步的。由Vector创建的Iterator，虽然和ArrayList创建的Iterator是同一<a href="http://baike.baidu.com/view/159864.htm">接口</a>，但是，因为Vector是同步的，当一个Iterator被创建而且正在被使用，另一个线程改变了Vector的状态（例如，添加或删除了一些元素），这时调用Iterator的方法时将抛出ConcurrentModificationException，因此必须捕获该异常。</p>
</li>
<li>
<p>对于Stack，Stack继承自Vector，实现一个后进先出的<a href="http://baike.baidu.com/view/93201.htm">堆栈</a>。Stack提供5个额外的方法使得Vector得以被当作<a href="http://baike.baidu.com/view/93201.htm">堆栈</a>使用。基本的push和pop方法，还有peek方法得到栈顶的元素，empty方法测试<a href="http://baike.baidu.com/view/93201.htm">堆栈</a>是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。</p>
</li>
<li>
<p>对于Set接口。Set是一种不包含重复的元素的Collection，即任意的两个元素e1和e2都有e1.equals(e2）=false，Set最多有一个null元素。</p>
</li>
</ol>
<blockquote>
<p>关于集合的介绍详情在<a href="https://www.cnblogs.com/jmsjh/p/7740123.html">这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>linux中的.configure、make、make install等命令</title>
    <url>/2020/09/19/linux%E4%B8%AD%E7%9A%84-configure-make-make-install%E7%AD%89%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>在安装某些软件的时候经常会使用到这些指令，就是<span class="ljspan  ljspan-reverse ljspan-red">./configure</span>、<span class="ljspan ljspan-reverse ljspan-blue">make</span>、<span class="ljspan ljspan-reverse ljspan-yellow">make install</span></p>
<p>我一直是不知道为何要执行这些指令的，一般不都是install不就完事了吗？</p>
<p>其实这里面大有文章啦😎,这些就是所谓的自动化构建工具啦<a id="more"></a></p>
<div class="note info">
            <p>一般通过源码安装才会用到这些东西啦。</p>
          </div>
<blockquote>
<p>那configure文件又是怎么来的呢？其实他还不是真正的源码，真正的源码通过autoconf和automake构建产生了configure文件。这方面就比较难了，详情可查看<a href="https://www.ibm.com/developerworks/cn/linux/l-makefile/">这里</a></p>
</blockquote>
<hr>
<h2 id="configure">configure</h2>
<p><span class="ljspan ljspan-reverse ljspan-red">configure</span>其实是一个可执行的脚本，它是用来生成 <span class="ljspan ljspan-blue">makefile</span>的，<span class="ljspan ljspan-blue">makefile</span>是用来干嘛的呢？他就是安装的未编译脚本啦，所以在生成它时，可以通过 <span class="ljspan ljspan-reverse ljspan-red">configure</span>的选项，来设置安装位置等</p>
<hr>
<h2 id="make">make</h2>
<p><span class="ljspan ljspan-reverse ljspan-blue">make</span>是用来编译由 <span class="ljspan ljspan-reverse ljspan-red">configure</span>产生的 <span class="ljspan ljspan-blue">makefile</span>文件的，编译后就生成了所需要的安装文件</p>
<hr>
<h2 id="make-install">make install</h2>
<p>通过 <span class="ljspan ljspan-blue">makefile</span>文件来安装程序</p>
<hr>
<h2 id="其他命令">其他命令</h2>
<h3 id="make-clean">make clean</h3>
<p>清除编译产生的可执行文件及目标文件(object file，*.o)；其实我觉得这里说的不是很对，一切以<span class="ljspan ljspan-blue">makefile</span>里面所写内容为主。</p>
<h3 id="make-check-make-test">make check/make test</h3>
<p>一般在make install命令之前执行的命令，用于检测编译文件时候正确。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux前后台的命令</title>
    <url>/2020/09/08/linux%E5%89%8D%E5%90%8E%E5%8F%B0%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>1.加在一个命令的最后，可以把这个命令放到<span class="label primary">后台执行</span>：<strong>&amp;</strong></p>
<blockquote>
<p>eg: <code>sh run.sh &amp;</code></p>
</blockquote>
<a id="more"></a>
<p>2.可以将一个正在前台执行的<span class="label danger">命令放到后台，并处于暂停状态</span>：<strong>ctrl+z</strong></p>
<p>3.<span class="label danger">查看当前有多少程序在后台运行</span>的命令：<strong>jobs</strong></p>
<p><code>jobs -l</code>选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识</p>
<p>4.将<span class="label danger">后台的命令调至前台继续运行</span>：<strong>fg</strong></p>
<blockquote>
<p>eg：<code>fg %jobsnumber</code></p>
</blockquote>
<p>5.<span class="label danger">将后台暂停的命令，变成在后台继续执行</span>：<strong>bg</strong></p>
<blockquote>
<p>eg：<code>bg %jobsnumber</code></p>
</blockquote>
<p>6.<span class="label danger">杀死进程</span>：<strong>kill</strong></p>
<p>法子1：通过jobs命令查看job号（假设为num），然后执行<code>kill %num</code><br>
法子2：通过ps命令查看job的进程号（PID，假设为pid），然后执行<code>kill pid</code></p>
<p>7.<span class="label danger">前台进程的终止</span>：<strong>Ctrl+c</strong></p>
<p>8.<span class="label warning">让程序/进程在后台进行，即使关闭终端也在执行</span>：<strong>nohup</strong></p>
<p>如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到），这时候需要nohup。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令）</p>
<blockquote>
<p>#在后台运行的nohup命令<br>
eg：<code>nohup xxx &amp;</code></p>
</blockquote>
<p>9.<span class="label success">进程查看命令</span>：<strong>ps</strong></p>
<p>#查看执行的test.sh命令</p>
<blockquote>
<p>ps -aux | grep “<a href="http://test.sh">test.sh</a>”</p>
</blockquote>
<p>#查看tomcat进程</p>
<blockquote>
<p>ps -aux |grep tomcat</p>
</blockquote>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">a:</span>显示所有程序 </span><br><span class="line"><span class="symbol">u:</span>以用户为主的格式来显示 </span><br><span class="line"><span class="symbol">x:</span>显示所有程序，不以终端机来区分</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的用法</title>
    <url>/2020/09/10/mysql%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><img src="/assets/img/640px-MySQL_logo.svg.png" alt=""></p>
<p>这里的mysql用法分linux和window两个部分，同时也采集了一些操作mysql时遇到的问题，放在结尾部分🗂</p>
<a id="more"></a>
<hr>
<h2 id="linux上的mysql">linux上的mysql</h2>
<h3 id="操作mysql服务🍄">操作mysql服务🍄</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看mysql服务的状态</span></span><br><span class="line">sudo service mysql status</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭mysql服务</span></span><br><span class="line">sudo service mysql stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启mysql服务</span></span><br><span class="line">sudo service mysql start </span><br></pre></td></tr></table></figure>
<h3 id="查找mysql文件🌻">查找mysql文件🌻</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询mysql的内容的地址(比较详细)</span></span><br><span class="line">find / -name mysql  </span><br><span class="line"><span class="comment">#也可通过whereis(比较笼统)</span></span><br><span class="line">whereis mysql</span><br></pre></td></tr></table></figure>
<h3 id="查看安装包🌿">查看安装包🌿</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可通过如下命令，查询通过apt-get的已安装的软件</span></span><br><span class="line">sudo dpkg -l</span><br></pre></td></tr></table></figure>
<h3 id="数据的各种目录解析🌱">数据的各种目录解析🌱</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql的datadir,用于存储数据</span></span><br><span class="line">/var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的配置文件目录</span></span><br><span class="line">/etc/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql服务的目录，就是‘service mysql start’等命令的执行处</span></span><br><span class="line">/etc/init.d/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#其实很多文件都在/usr目录中</span></span><br><span class="line"><span class="comment">#mysql命令目录</span></span><br><span class="line">/usr/bin/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#动态库</span></span><br><span class="line">/usr/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#帮助文档</span></span><br><span class="line">/usr/share/mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="window上的mysql">window上的mysql</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启服务</span></span><br><span class="line">net start mysql</span><br><span class="line"><span class="comment">#关闭服务</span></span><br><span class="line">net stop mysql</span><br><span class="line">--------------------</span><br><span class="line">(需要登录到mysql后才使用)</span><br><span class="line"><span class="comment">#查看数据库基本信息</span></span><br><span class="line">status;</span><br><span class="line"><span class="comment">#查看端口号</span></span><br><span class="line">show global variables like <span class="string">&#x27;port&#x27;</span>;  </span><br></pre></td></tr></table></figure>
<hr>
<h2 id="mysql问题集">mysql问题集</h2>
<h3 id="1-程序被占用？sock-lock-file无法修改？">1.程序被占用？sock lock file无法修改？</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2020-03-27T06:51:55.089835Z 0 [ERROR] Another process with pid 5244 is using unix socket file.</span><br><span class="line">2020-03-27T06:51:55.089873Z 0 [ERROR] Unable to setup unix socket lock file.</span><br><span class="line">2020-03-27T06:51:55.089886Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure>
<p><span class="ljspan ljspan-red">解决办法</span>:</p>
<p>​	1️⃣：关闭mysql服务<br>
​	2️⃣：到/var/run/mysqld/目录中，找到mysqld.sock.lock文件,重命名或者备份后删除原文件<br>
​	3️⃣：重新启动mysql服务即可</p>
<h3 id="2-绑定IP-端口权限限制">2.绑定IP/端口权限限制</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2020-03-26T06:52:46.063437Z 0 [ERROR] Can<span class="string">&#x27;t start server: Bind on TCP/IP port: Permission denied</span></span><br><span class="line"><span class="string">2020-03-26T06:52:46.063462Z 0 [ERROR] Do you already have another mysqld server running on port: 3306 ?</span></span><br><span class="line"><span class="string">2020-03-26T06:52:46.063487Z 0 [ERROR] Aborting</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>遇到这个问题可能是端口占用问题，也可能是主机IP的设置问题</p>
</blockquote>
<p>情况一：</p>
<p>我无法通过ssh方式远程登录mysql，但使用localhost本机，就可以登陆了，这个就是IP问题啦📝</p>
<p>可通过修改mysql配置文件解决，可能是<span class="label danger">my.cnf</span>文件，也有可能是<span class="label warning">mysqld.cnf</span>等等，反正看到有配置<span class="label info">datadir</span>和<span class="label info">socket</span>等字眼的文件就是了</p>
<p>进入<span class="label danger">my.cnf</span>然后如果看到<code>bind-address   = 127.0.0.1</code>，就注销掉，这样就可以远程开启mysql服务了</p>
<p>情况二：<br>
由于端口3306被占用，所以开启不了！kill掉占用这个端口的进程就行了</p>
<h3 id="3-mysql字符格式导致无法导出数据">3.mysql字符格式导致无法导出数据</h3>
<p>想使用workbench<span class="label success">导出数据库表为sql脚本</span>，然后导入到其他系统中去<br>
但是在使用sql脚本直接导入到linux中的mysql数据库中，但是一直报错，如下👇</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ERROR 1273 (HY000): Unknown collation: <span class="string">&#x27;utf8mb4_0900_ai_ci&#x27;</span></span><br></pre></td></tr></table></figure>
<p>很明显是字符错误的问题（排序规则），所以我改了数据库的排序规则，但是不行😵</p>
<p>点开每个数据库表，发现它的排序规则也不同，接着修改，还是不行，很奇怪👴</p>
<p>后面发现每个column的排序规则也要修改，🐢🐢，做完这一步，才能实现导入成功</p>
<blockquote>
<p>sql脚本记录的是表数据，并不是整个数据库，所以一般需要新建</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入数据库</span></span><br><span class="line">mysql -u username -p password</span><br><span class="line"><span class="meta">#</span><span class="bash">进入数据库（没有需要新建）</span></span><br><span class="line">use database;</span><br><span class="line"><span class="meta">#</span><span class="bash">跑sql脚本</span></span><br><span class="line">source /path/to/xxx.sql</span><br></pre></td></tr></table></figure>
<h3 id="4-多个数据库混合使用同一个配置文件">4.多个数据库混合使用同一个配置文件</h3>
<p>使用<span class="ljspan ljspan-blue">sqlyog</span>登录数据库一直失败,但是使用cmd登录mysql却成功了🙇<br>
然后我就进入mysql中查看数据库的版本信息和端口号的信息,发现版本对了，但是端口错了，修改端口重启，但是端口还是没有变！(⊙o⊙)？…阿这…<br>
找到问题了，原来因为我<span class="label danger">下载安装了多个数据库</span>又没有配置清楚，所以导致我登录的数据库使用到的是其他数据库的配置文件my.ini，这就导致了之前的修改端口无效。</p>
<p>问题找到了，但是这个执行文件的默认读取配置文件路径怎么改呢？…(⊙﹏⊙)</p>
<blockquote>
<p>通过上网可知，可通过修改注册表来设置。</p>
</blockquote>
<p>打开<code>注册表编辑器</code>–<code>HKEY_LOCAL_MACHINE</code>–<code>SYSTEM</code>–<code>CurrentControlSet</code>–<code>Services</code>(到这一步可以看到数据库名称)，之前我就是通过在这里修改<code>DisplayName</code>/<code>ImagePath</code>来区分不同的数据库服务的。现在可通过修改<code>ImagePath</code>，在里面的执行文件后添加<br>
–defaults-file=“path\to\your mysql file\my.ini”（这是我在mysql8.0的服务中看到的:happy:）<br>
这样就可以啦</p>
<h3 id="5-误用其他数据库配置导致无法读取数据">5.误用其他数据库配置导致无法读取数据</h3>
<p>由于上一个问题导致了这一个问题(+_+)?</p>
<div class="note info">
            <p>在linux上可以通过日志目录直接查看日志；那windows上的日志文件应该也有吧，没有日志目录，但是在data文件中，其实有关于数据库增删改查的缓存和错误信息的日志，所以如果数据库无法连接，可以在这里找错误日志文件</p>
          </div>
<p>这次的问题是因为之前mysql8.0使用mysql5.7的配置文件my.ini，而mysql5.7的<span class="label info">数据配置</span>都是在my.ini中的，所以导致之前<span class="label warning">mysql5.7操作数据库</span>使用的是<span class="label danger">mysql8.0的引擎</span>，而现在换成mysql.5.7引擎了,自然内部的缓存数据文件无法操作。</p>
<p><span class="ljspan ljspan-red">解决方法</span><br>
1.直接重装数据库（如果里面没有重要数据）<br>
2.删掉所有数据文件后重启数据库<br>
3.通过查看错误日志文件，官方推荐是使用<a href="https://dev.mysql.com/doc/refman/5.7/en/forcing-innodb-recovery.html">强制恢复模式</a>来恢复数据</p>
<h3 id="6-mysql初始化失败">6.mysql初始化失败</h3>
<p>想在电脑上安装mysql5.7，之前已经在我的电脑上装了两个mysql8，一个是源码安装，一个是安装器安装</p>
<p>这一次我也想通过源码安装，mysql服务安装倒是没问题，但是mysql初始化一直失败，不知道为何🙉</p>
<p>通过一些蛛丝马迹，我发现，每次初始化，我的另一个msyql的data文件夹有更新，但是我没有动它呀！(￣ ‘i ￣;)</p>
<p>查看日志，发现错误如下👇</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Warning] <span class="string">&#x27;NO_ZERO_DATE&#x27;</span>, <span class="string">&#x27;NO_ZERO_IN_DATE&#x27;</span> and <span class="string">&#x27;ERROR_FOR_DIVISION_BY_ZERO&#x27;</span> sql modes should be used with strict mode. They will be merged with strict mode <span class="keyword">in</span> a future release.</span><br><span class="line">[Warning] <span class="string">&#x27;NO_AUTO_CREATE_USER&#x27;</span> sql mode was not <span class="built_in">set</span>.</span><br><span class="line">[Error] initialize specified but the data directory has files <span class="keyword">in</span> it. Aborting</span><br></pre></td></tr></table></figure>
<p>我还没初始化，我的mysql5.7目录下，并没有data文件夹，为何会说我有？</p>
<p>难道每次初始化都去mysql8文件夹下查找❔(⊙o⊙)❔</p>
<p>既然如此，我觉得应该就是<span class="label success">环境变量</span>的问题了，所以我修改mysql的环境变量为mysql5.7的，重新执行如下就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#可以初始化了</span><br><span class="line">mysql --initialize  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mariadb忘记密码</title>
    <url>/2020/09/20/mariadb%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<div class="note info">
            <p>mariadb和mysql等数据库，其实没有什么配置文件，就<span class="label warning">/etc/my.cnf</span>，就算有其他配置文件，也都写在<span class="label info">my.cnf</span>里面，从这里面找就行😄</p>
          </div>
<h2 id="修改配置文件">修改配置文件</h2>
<p>忘记 <span class="ljspan ljspan-reverse ljspan-red">MariaDB</span>的root密码，需要修改root密码</p>
<p>在 <span class="ljspan ljspan-reverse ljspan-red">MariaDB</span>配置文件<span class="label warning">/etc/my.cnf</span>中的<span class="label success">[mysqld]</span>中加入一行：<code>skip-grant-tables</code></p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3307</span></span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="number">0</span></span><br><span class="line"><span class="comment"># Settings user and group are ignored when systemd is used.</span></span><br><span class="line"><span class="comment"># If you need to run mysqld under a different user or group,</span></span><br><span class="line"><span class="comment"># customize your systemd unit file for mariadb according to the</span></span><br><span class="line"><span class="comment"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class="line"><span class="comment">#取消mysql进行域名解析</span></span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="comment">#设置数据去默认编码为UTF-8</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"><span class="comment">#skip-grant-tables</span></span><br><span class="line"><span class="comment">#加入下面这一行</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
<p>重启服务</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ <span class="regexp">/etc/i</span>nit.d/mysqld restart</span><br></pre></td></tr></table></figure>
<h2 id="重新登陆">重新登陆</h2>
<p>进入 <span class="ljspan ljspan-reverse ljspan-red">MariaDB</span>修改root的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.27 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| engine_cost               |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| gtid_executed             |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| innodb_index_stats        |</span><br><span class="line">| innodb_table_stats        |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| server_cost               |</span><br><span class="line">| servers                   |</span><br><span class="line">| slave_master_info         |</span><br><span class="line">| slave_relay_log_info      |</span><br><span class="line">| slave_worker_info         |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">31 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update user set authentication_string&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的authentication_string字段有时候可能是password，取决于你的版本</p>
<p>如果在修改密码的时候出现这样的错误<code>Unknown column 'password' in 'field list'</code>，那证明mysql不支持passward字段了，mysql5.7以后，authentication_string字段代替了password字段</p>
</blockquote>
<h2 id="再次登陆">再次登陆</h2>
<p>在登陆前要注释掉配置文件<span class="label warning">/etc/my.cnf</span>中 <span class="label success">[mysqld]</span>里面的的<code>skip-grant-tables</code>字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.27 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title>python及其工具</title>
    <url>/2020/09/11/python%E5%8F%8A%E5%85%B6%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="Python版本">Python版本</h2>
<p>1.分别有python和python3两种，python3对应Python3.x版本</p>
<p>而python对应Python2.x版本</p>
<p>2.pip和pip2相同，均对应Python2.x版本；而pip3对应Python3.x版本</p>
<a id="more"></a>
<hr>
<h2 id="Python包管理工具">Python包管理工具</h2>
<p>现在的包管理工具都是用<span class="ljspan  ljspan-red">pip</span>了，以前都是使用<span class="ljspan ljspan-black">setuptools</span>，老版本的python就还都在用。</p>
<hr>
<h2 id="python虚拟环境">python虚拟环境</h2>
<p>搭建python虚拟环境，现在都使用<span class="ljspan ljspan-red">conda</span>来安装</p>
<blockquote>
<p>安装Conda，请看<a href="">这里</a></p>
</blockquote>
<p>不过，以前都是用<span class="ljspan">virtualenv</span>来设置虚拟环境的</p>
<p>这里有安装步骤👇</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[---]：大括号内的内容需要用户自己填写</span></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建目录，这是必须的，用于存储虚拟环境</span></span><br><span class="line">mkdir myproject</span><br><span class="line"><span class="built_in">cd</span> myproject/</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个独立的python环境（即虚拟环境）</span></span><br><span class="line">virtualenv --python=[python-version] [env-name]</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入这个虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> [env-name]/bin/activate</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Python的其他工具">Python的其他工具</h4>
<hr>
<ol>
<li>Fabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率。</li>
<li>是用于自动化构建软件的工具：bulidout</li>
<li>图像处理标准库：pillow</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>下载工具Aria2</title>
    <url>/2020/05/28/%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7Aria2/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>一般的下载工具都要下载软件，每次要下载东西，都需要先打开它，像迅雷还有一堆广告和插件😤。Aria2可以直接通过网页下载，速度很快哦，完全没有其他插件和广告，不过暂不支持外网资源，反正我的是这样💩</p>
<a id="more"></a>
<hr>
<h2 id="功能">功能</h2>
<ul>
<li>支持多种格式：<strong>http/https</strong>, <strong>magnet</strong>(磁力链接), <strong>BT种子</strong>👀</li>
<li>小而简单：只有2M的大小</li>
<li>使用浏览器显示下载界面</li>
</ul>
<h3 id="下载地址"><a href="https://github.com/aria2/aria2">下载地址</a></h3>
<hr>
<h2 id="介绍">介绍</h2>
<p>由于<span class="ljspan ljspan-reverse"><a href="https://github.com/aria2/aria2">Aria2</a></span>是一个命令行的工具，可用于多种系统，包括<strong>Linux系统</strong>，所以，对于图形化界面的<strong>Windows</strong>用户来说。短时间难以操作</p>
<p>故有许多Hacker提供了插件，通过简便的设置之后就可以通过图形化界面下载啦！</p>
<h3 id="插件下载-配置地址：">插件下载/配置地址：</h3>
<p>插件1:<a href="http://aria2c.com/usage.html">有应用程序的工具(包括配置说明文档)</a>;</p>
<p>插件2:可在后台运行的工具<br>
(链接: <a href="https://pan.baidu.com/s/13QBieprXBuYOfZ9PmlTBAQ">https://pan.baidu.com/s/13QBieprXBuYOfZ9PmlTBAQ</a> 提取码: skct)；</p>
<hr>
<h2 id="⭐️简单的指导：">⭐️简单的指导：</h2>
<p>通过上面的下载地址，下载完成后，解压文件到你要的目录中，然后下载任一一款<strong>插件</strong>，解压后放在同一个文件夹中，下图是<strong>插件1</strong>的设置内容，</p>
<p>如图所示：</p>
<p><img src="/assets/img/image-20200528112413587.png" alt="配置目录"></p>
<p>对于<strong>图中选中的部分</strong>就是<a href="https://github.com/aria2/aria2">下载地址</a>下载的部分，这部分主要需要替代<strong>插件</strong>中的<span class="ljspan ljspan-reverse">aria2c</span>这个东西，其他的可以忽略</p>
<p>配置文件(以**.conf**为后缀)可以设置你所需要的各项配置（这里就是省略了你在命令行一个一个的设置）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#启动aria2</span></span><br><span class="line">点击aria2启动.VBS</span><br><span class="line"><span class="section">#关闭aria2</span></span><br><span class="line">点击aria2关闭.bat</span><br><span class="line"><span class="section">#设置快捷方式</span></span><br><span class="line">插件一：把aria2.exe(不是aria2c.exe)设置为快捷方式</span><br><span class="line">插件二：把aria2启动.VBS设置为快捷方式</span><br></pre></td></tr></table></figure>
<p>查看下载内容的web端<a href="http://aria2c.com/"><strong>aria2c.com</strong></a>，直接再浏览器输入就可以了！</p>
<hr>
<p>本文章相关的参考文档：</p>
<p>《<a href="https://www.appinn.com/aria2-in-windows-setup/">插件一的相关文档</a>》</p>
<p>《<a href="https://zhuanlan.zhihu.com/p/30666881">插件二的相关文档</a>》</p>
<p>《<a href="https://zhuanlan.zhihu.com/p/21831960">配置的相关文档</a>》</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>resolv.conf</title>
    <url>/2020/09/09/resolv-conf/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>resolv.conf是什么呢❔，光看名字不懂！💫其实他就是一个DNS客户机配置文件，用于设置DNS服务器的IP地址以及DNS域名</p>
<a id="more"></a>
<h2 id="resolv-conf文件解析">resolv.conf文件解析</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nameserver    *//定义DNS服务器的IP地址* </span><br><span class="line">domain       *//定义本地域名* </span><br><span class="line">search        *//定义域名的搜索列表* </span><br><span class="line">sortlist        *//对返回的域名进行排序*</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nameserver参数必须有😀，其他为可选</p>
</blockquote>
<hr>
<h2 id="resolv-conf由三种方式控制">resolv.conf由三种方式控制</h2>
<p>1.network manager</p>
<p>2.resolvconf</p>
<p>3.systemd-resolved</p>
<hr>
<h2 id="关于避免在-etc-resolv-conf中使用namespace127-0-0-53">关于避免在/etc/resolv.conf中使用namespace127.0.0.53</h2>
<p>这个问题在<span class="ljspan ljspan-reverse ljspan-blue"><a href="/2020/09/08/%E5%AE%89%E8%A3%85elabFTW/">安装elabFTW</a></span>时出现过，因为elabftw是采用docker安装的，安装时，用到两个容器，分别是elabftw_web和mysql容器，但是两个容器一直无法连接，一直报没有安装mysql容器，最后通过<span class="ljspan ljspan-blue"><a href="https://github.com/elabftw/elabftw/issues/1881">github提问</a></span>,作者告诉了我问题的原因就是这个，提供的解决办法再上面的文章上，最后我是改用networkmanager来管理,才解决该问题</p>
<blockquote>
<p>关于这个问题的详细叙述文章在<a href="https://www.hiroom2.com/2017/08/24/ubuntu-1610-nameserver-127-0-0-53-en/">这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>优化个人博客</title>
    <url>/2020/08/31/%E4%BC%98%E5%8C%96%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前言"># 前言</h2>
<p>看着台湾某大神的✨<span class="ljspan ljspan-blue"><a href="https://oawan.me/">博客</a></span>✨，生成向往，太好看了😭😭😭</p>
<p>所以决定自己也跟着完善和优化我的博客</p>
<a id="more"></a>
<blockquote>
<p>以下一下相关术语，可翻<a href="https://theme-next.js.org/docs/getting-started/">NexT官方文档</a>查看，比如：<code>theme config file</code></p>
</blockquote>
<hr>
<h2 id="设置分类-标签">设置分类/标签</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先新建一个分类页面(标签改&quot;categories&quot;为&quot;tags&quot;)</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">categories</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在这个页面中设置(标签改&quot;categories&quot;为&quot;tags&quot;)</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于文章如果想设置其属于哪个分类/标签</span></span><br><span class="line"><span class="comment">#直接在头部添加</span></span><br><span class="line"><span class="comment">#分类</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">目录名</span></span><br><span class="line"><span class="comment">#标签</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以添加多个标签哦，只需要分类的下一行再添加<code>- 目录名/标签名</code>就可以啦</p>
</blockquote>
<hr>
<h2 id="设置自定义样式表">设置自定义样式表</h2>
<p>其实<a href="https://theme-next.js.org/docs/advanced-settings/custom-files.html">官方文档</a>都有记载，我是直接采用官方文档记载的方式实现的，这样就不容易冲突/出错,我只是照搬抄写而已😐</p>
<h3 id="1-创建-data目录">1.创建_data目录</h3>
<blockquote>
<p>在根目录下的<code>/source</code>中创建_data目录</p>
</blockquote>
<h3 id="2-创建自定义样式文件">2.创建自定义样式文件</h3>
<blockquote>
<p>文件名和路径需要跟<code>theme config file</code>中的<code>custom_file_path</code>中的一致</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#配置布局</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#配置侧边栏</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#配置样式 覆盖+&quot;!important&quot;</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Hexo中使用emoji表情">Hexo中使用emoji表情</h2>
<h3 id="前言-2">#前言</h3>
<p>其实<a href="https://github.com/theme-next/awesome-next#live-preview">NexT</a>官网有关于emoji的使用介绍💅，不过，它使用的是<a href="https://github.com/theme-next/hexo-filter-emoji">hexo-filter-emoji</a>(GitHub emojis for Hexo)，可我想要的是markdown里面的emoji啊，那个更可爱点✌️</p>
<p>上网找了找，有博主实现了💯，资料也比较新，相关文档如下：</p>
<p><a href="https://www.geek-space.cn/post/emoji.html">参考博主1</a></p>
<p><a href="%5Bhttps://hasaik.com/posts/9b280ea3.html#%F0%9F%8C%9E-%E5%AE%89%E8%A3%85%5D(https://hasaik.com/posts/9b280ea3.html#%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD-%E5%AE%89%E8%A3%85)">参考博主2</a></p>
<h3 id="安装">安装</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>修改<code>site config file</code>：_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line"><span class="comment">#关键添加这个</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>详细配置<a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Advanced-Configuration">看这里</a></p>
</blockquote>
<hr>
<h2 id="Hexo中设置图片FancyBox插件">Hexo中设置图片FancyBox插件</h2>
<h3 id="前言-3">#前言</h3>
<p>通过某博主(前面有提到)的博客，发现它的博客文章打开图片都很好看😍，所以就想着跟着他做，看到他引用的是<a href="https://fancyapps.com/fancybox/#license">FancyBox</a>框架，刚好<span class="ljspan ljspan-blue">NexT</span>主题也支持，那真是绝佳啊😉</p>
<h3 id="配置-2">配置</h3>
<p>修改<code>site config file</code>：_config.yml</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启fancybox功能</span></span><br><span class="line">fancybox: <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置fancybox的css,js,jquery的地址</span></span><br><span class="line"><span class="comment">#可采用cdn的方式也可以使用本地目录引入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FancyBox</span></span><br><span class="line">jquery: <span class="comment">#链接地址</span></span><br><span class="line">fancybox: <span class="comment">#链接地址</span></span><br><span class="line">fancybox_css: <span class="comment">#链接地址</span></span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#通过配置自定义样式表source/_data/styles.styl</span><br><span class="line">#添加代码如下</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">&quot;.fancybox&quot;</span>).fancybox(&#123;		          </span><br><span class="line">		  helpers : &#123;</span><br><span class="line">			  overlay : &#123;</span><br><span class="line">				  css : &#123;</span><br><span class="line">					  <span class="string">&#x27;background-color&#x27;</span> : <span class="string">&#x27;transparent&#x27;</span></span><br><span class="line">				  &#125;</span><br><span class="line">			  &#125;</span><br><span class="line">		  &#125;</span><br><span class="line">	  &#125;);		       </span><br><span class="line">&#125;); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="示例演示">示例演示</h3>
<blockquote>
<p>点击图片，有一个弹出效果哦！</p>
</blockquote>
<p><img src="/assets/img/20200831_144728.gif" alt="示例"></p>
<hr>
<blockquote>
<p>感谢<a href="https://wavedanger.gitee.io/blog/">浪险兄</a>提供的在线录屏工具！！！👊</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用curl遇到的问题</title>
    <url>/2020/09/11/%E4%BD%BF%E7%94%A8curl%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在使用curl下载github内容时经常出现问题</p>
<p>比如：<code>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code></p>
<a id="more"></a>
<p>这是因为<span class="label success">**raw.githubusercontent.com**</span> 这个域名被污染了，所以在hosts文件里面添加一下ip映射就可以啦</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加如下，ip可通过 https://www.ipaddress.com/ 查询 </span></span><br><span class="line">x.x.x.x(ip) raw.githubusercontent.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#这样就可以啦！</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实在window上也经常遇到类似问题😏</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>图像要点</title>
    <url>/2020/10/15/%E5%9B%BE%E5%83%8F%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h3 id="图像自适应">图像自适应</h3>
<p>图像<span class="ljspan ljspan-red">自适应</span>，是什么意思呢？顾名思义，就是图片的大小适应方框的大小，在方框里面，而不越边界</p>
<p>看看图吧，您就知道了😆<a id="more"></a></p>
<img src="/assets/img/image-point1.png" alt="image-point1" />
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px;border: 1px solid orangered;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">&quot;img/Header_img.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>图片太大，溢出了DIV框，那如何把图片变得伸缩自如，只在方框内而已</p>
<p>在css样式中添加<code>max-width=100%</code>就可以看到图片变得可<span class="ljspan ljspan-red">自适应</span>了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">style</span>=<span class="string">&quot;width: 600px;height: 400px;border: 1px solid orangered;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加了max-width属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/Header_img.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/assets/img/image-point2.png" alt="image-point2"></p>
<p>可以看到图片整个<strong>缩小</strong>后，完全放置于DIV方框内了。😄学会了吧！</p>
<hr>
<h3 id="图像内显示文字">图像内显示文字</h3>
<p>一般的图像和文字分开写，并不会产生内嵌，那如何让文字内嵌于图片中，下图为一般的文字图片显示内容</p>
<p><img src="/assets/img/image-point3.png" alt="image-point3"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/Header_img.png&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-size:42px; line-height:49px;&quot;</span>&gt;</span> A Targeted gene sequencing database for cancer susceptibility gene.  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要达到内嵌，可以使用<span class="ljspan ljspan-blue">Position属性</span>，DIV设置为相对位置（relative），图片不用设置，添加到DIV中，然后再添加文字到DIV中，这时候文字设置为绝对定位（absolute）,可以添加一些定位的属性:top、bottom、left、right等等。如下图</p>
<p><img src="/assets/img/image-point4.png" alt="image-point4"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加属性position: relative;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative;&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/Header_img.png&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--添加属性position: absolute;top: 10px;left: 10px; --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-size:42px; line-height:49px;position: absolute;top: 10px;left: 10px;&quot;</span>&gt;</span> A Targeted gene sequencing database for cancer susceptibility gene.  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>分区与挂载</title>
    <url>/2020/09/09/%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="分区">分区</h2>
<p>查看<span class="label danger">分区与挂载</span>情况：df -h</p>
<p>查看<span class="label info">当前目录下一级子文件和子目录占用的磁盘容量</span>：du -lh --max-depth=1</p>
<a id="more"></a>
<p>查看<span class="label warning">磁盘的分区</span>情况：sudo fdisk -l</p>
<ul>
<li>disk: 就是分区</li>
<li>device: 就是一些分区好了的磁盘设备</li>
</ul>
<span class="label info">挂载</span>和<span class="label info">卸载</span>分区：mount/umount
<blockquote>
<p>挂载成功以后，需要把挂载信息写在/etc/fstab上才能在每次开机后，自动挂载分区</p>
</blockquote>
<p>mount还可以查看系统各分区的文件系统❕</p>
<hr>
<h3 id="示例：">示例：</h3>
<p>想把<code>dev/sdb</code>这个磁盘分区💩</p>
<p><code>fdisk /dev/sdb</code>进入以后就可以分区了</p>
<p>✨<span class="label success">fdisk</span>功能可是很强大的哦👀</p>
<p>分了两个主盘sdb1和sdb2</p>
<p>分区好了以后，发现无法给这些分区格式化文件系统😩</p>
<p>调查之后，发现是因为<code>/dev/sdb1</code> 正被系统使用，只能取消建立文件系统 ！</p>
<p>原来之前的/dev/sdb是挂载在data1上的，现在被分区了，就不能再挂载了💨</p>
<p>卸载后data1后，就可以设置文件系统了</p>
<p>现在，就可以把/dev/sdb1挂载到/home上啦🙂</p>
<hr>
<h3 id="分区或者说是某个挂载目录扩容">分区或者说是某个挂载目录扩容</h3>
<p>因为没有之前的磁盘没有使用逻辑盘符来设置，所以没办法使用<span class="label primary">逻辑卷</span>来扩容</p>
<p>只能删除原有磁盘的数据或者迁移数据到新磁盘上了，我没有给旧磁盘扩容了，怕又出错。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>处理Json格式数据</title>
    <url>/2020/09/04/%E5%A4%84%E7%90%86Json%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>前台页面通常都会通过<code>Ajax</code>来获取后台的数据，某些接口传输数据也都是以<code>Json</code>格式来传输，故处理<code>Json</code>格式数据边得很重要鸭🦆</p>
<a id="more"></a>
<h2 id="处理Json格式数据">处理Json格式数据</h2>
<p>在微信返回的消息中，有些是以json数据包的格式呈现的👇</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>:<span class="string">&quot;ACCESS_TOKEN&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>:<span class="number">7200</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>:<span class="string">&quot;REFRESH_TOKEN&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;openid&quot;</span>:<span class="string">&quot;OPENID&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>:<span class="string">&quot;SCOPE&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那如何取出这里面的信息呢。那就需要用到<span class="ljspan ljspan-reverse ljspan-red"><a href="https://github.com/alibaba/fastjson">fastjson</a></span>啦!🍄</p>
<p>一般从网络🌏上获取/传输的<code>json数据包</code>，都是<span class="ljspan ljspan-red">json字符串</span>，如果需要取出来，需要把它转化为<span class="ljspan ljspan-red">json对象</span>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//json字符串转json对象</span></span><br><span class="line">String result = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;2323&quot;,&quot;sex&quot;:&quot;afasdf&quot;,&quot;age&quot;:&quot;6262&quot;&#125;&#x27;</span>;</span><br><span class="line">JSONObject jsonObject =JSON.parseObject(result);</span><br><span class="line"><span class="comment">//这样就可以从json对象jsonobject中获取到你所需要的信息了	  </span></span><br><span class="line">String name = jsonObject.getString(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>另一方面，如果要传输<code>json数据包</code>​​，一般也是先编写好<span class="ljspan ljspan-red">json对象</span>后，转化为<span class="ljspan ljspan-red">json对象</span>后传输​。🌵</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">&quot;button&quot;</span>:[</span><br><span class="line">     &#123;	</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;view&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;我的报告&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;/path/to/Report&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;	</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;click&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;我的社区&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>:<span class="string">&quot;V1001_COMMUNITY&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;	</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;click&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;个人中心&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>:<span class="string">&quot;V1001_TODAY_MUSIC&quot;</span></span><br><span class="line">       &#125;]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>👇下面代码这是对上面☝️的实现哦。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装json对象</span></span><br><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject1.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;view&quot;</span>);</span><br><span class="line">jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;我的报告&quot;</span>);</span><br><span class="line">jsonObject1.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;/path/to/Report&quot;</span>);</span><br><span class="line">JSONObject jsonObject2 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject2.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;click&quot;</span>);</span><br><span class="line">jsonObject2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;我的社区&quot;</span>);</span><br><span class="line">jsonObject2.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;V1001_COMMUNITY&quot;</span>);</span><br><span class="line">JSONObject jsonObject3 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject3.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;click&quot;</span>);</span><br><span class="line">jsonObject3.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;个人中心&quot;</span>);</span><br><span class="line">jsonObject3.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;V1001_TODAY_MUSIC&quot;</span>);</span><br><span class="line">jsonArray.add(jsonObject1);</span><br><span class="line">jsonArray.add(jsonObject2);</span><br><span class="line">jsonArray.add(jsonObject3);</span><br><span class="line">jsonObject.put(<span class="string">&quot;button&quot;</span>,jsonArray);</span><br><span class="line"><span class="comment">//转化为json字符串</span></span><br><span class="line">String jsonString = jsonObject.toJSONString();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用eclipse提示功能，可以看到许多<code>jsonObject</code>和<code>JSON</code>的方法！</p>
</blockquote>
<hr>
<h2 id="自动转化json数据">自动转化json数据</h2>
<p>后台服务可以自动转化某类对象为json格式到前台页面，前端页面可直接取用，你说神不神奇🐸,它一般结合<code>@ResponseBody</code>一起使用</p>
<p>它就是<span class="ljspan ljspan-yellow"><a href="https://github.com/FasterXML/jackson-databind">jackson databind</a></span>，貌似上文提到的<span class="ljspan ljspan-red">fastjson</span>也可以实现(不过，还需要其他配置)，但是<span class="ljspan ljspan-yellow">jackson databind</span>只需要引入依赖包就行了🙂</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Json</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>处理XML数据</title>
    <url>/2020/09/04/%E5%A4%84%E7%90%86XML%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>解析<code>XML</code>数据，感觉很难，无从下手🙊，其实是因为解析<code>XML</code>的<a href="https://www.cnblogs.com/c-xiaohai/p/6796116.html">方法</a>太多了，感觉都差不多，混合在一块，分不清了😵就看不懂了。</p>
<a id="more"></a>
<h2 id="解析xml">解析xml</h2>
<p>我采用的是<code>dom4</code>的<a href="http://www.51gjie.com/java/739.html">方法</a>解析<code>XML</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">Document document = saxReader.read(<span class="keyword">new</span> File(<span class="string">&quot;students.xml&quot;</span>));</span><br><span class="line"><span class="comment">// 获取根元素</span></span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line"><span class="comment">// 获取所有子元素</span></span><br><span class="line">List&lt;Element&gt; childList = root.elements();</span><br><span class="line"><span class="comment">// 把xml信息转化为hashmap</span></span><br><span class="line">HashMap&lt;String,String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span> (Element element : elementsList) &#123;</span><br><span class="line">    hashMap.put(element.getName(), element.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="序列化-反序列化xml">序列化/反序列化xml</h2>
<ol>
<li>创建<code>XStream</code> 对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XStream xstream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> StaxDriver());</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>序列化对象到<code>XML</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object to XML Conversion</span></span><br><span class="line">String xml = xstream.toXML(student);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>反序列化<code>XML</code>获得对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XML to Object Conversion</span></span><br><span class="line">Student student1 = (Student) xstream.fromXML(xml)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里生成的XML是包含<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</code>前缀的xml文本</p>
</blockquote>
<hr>
<h2 id="微信的XML格式"><em>微信的XML格式</em></h2>
<p>微信的<code>XML</code>回复信息，某些文本需要添加<code>&lt;![CDATA['text']]</code>，网友提供的方法如下，但是我还看不懂啊😂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义xml对象格式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> XStream xStream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> XppDriver() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> HierarchicalStreamWriter <span class="title">createWriter</span><span class="params">(Writer out)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PrettyPrintWriter(out) &#123;</span><br><span class="line">			<span class="keyword">boolean</span> cdata = <span class="keyword">true</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startNode</span><span class="params">(String name, Class clazz)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">super</span>.startNode(name, clazz);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeText</span><span class="params">(QuickWriter writer,String text)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(cdata) &#123;</span><br><span class="line">					writer.write(<span class="string">&quot;&lt;![CDATA[&quot;</span>);</span><br><span class="line">					writer.write(text);</span><br><span class="line">					writer.write(<span class="string">&quot;]]&gt;&quot;</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					writer.write(text);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;	</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>安装ERPNext</title>
    <url>/2020/09/08/%E5%AE%89%E8%A3%85ERPNext/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>由于我的服务器内存不够用了，且为了防止软件太多，环境太复杂对新安装软件的影响，所以我采用虚拟机的方式安装<span class="ljspan ljspan-reverse ljspan-blue"><a href="https://github.com/frappe/erpnext">ERPNext</a></span></p>
<a id="more"></a>
<p><strong>使用虚拟机的好处💅</strong></p>
<ul>
<li>比较简单</li>
</ul>
<p>直接到<a href="https://github.com/frappe/erpnext">官网下载</a>虚拟机的镜像文件后</p>
<p>使用虚拟机利用这个镜像安装这个系统!</p>
<p>然后启动虚拟机</p>
<p>登录网址为：<a href="http://localhost:8080">http://localhost:8080</a></p>
<hr>
<h2 id="问题">问题</h2>
<p>但是每次重启，数据库都报错了！</p>
<p><a href="https://openwritings.net/pg/mariadb/mariadb-start-mysqld-tc-heuristic-recover-switch">这里</a>有解决办法👴</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过 ~/frappe-bench/logs/web.error.log</span></span><br><span class="line"><span class="comment">#可知数据库出错了</span></span><br><span class="line"></span><br><span class="line">OperationalError: (2003, <span class="string">&quot;Can&#x27;t connect to MySQL server on u&#x27;localhost&#x27; ([Errno 111] Connection refused)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#具体的错误记载在这里</span></span><br><span class="line"><span class="comment">#~/frappe-bench/logs/bench.log	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解决办法：mysqld --tc-heuristic-recover=ROLLBACK</span></span><br><span class="line"></span><br><span class="line">mysqld --tc-heuristic-recover=ROLLBACK</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line"></span><br><span class="line">但是发现还有个错误</span><br><span class="line">Apr 30 06:23:45 ubuntu mysqld[4244]: 2020-04-30  6:23:45 139795985828032 [Note] /usr/sbin/mysqld (mysqld 10.2.24-MariaDB-10.2.24+maria~xenial-log) starting as process 4244 </span><br><span class="line">Apr 30 06:23:45 ubuntu mysqld[4244]: 2020-04-30  6:23:45 139795985828032 [Warning] Could not increase number of max_open_files to more than 16364 (request: 21012)</span><br><span class="line">Apr 30 06:23:45 ubuntu mysqld[4244]: 2020-04-30  6:23:45 139795985828032 [Warning] Changed limits: max_open_files: 16364  max_connections: 500 (was 500)  table_cache: 7917 </span><br><span class="line"> </span><br><span class="line"><span class="comment">#我只知道修改max_open_file在/lib/systemd/system/mariadb.service</span></span><br><span class="line"><span class="comment">#那个 LimitNOFILE有记载，我也修改了</span></span><br><span class="line"><span class="comment">#同时</span></span><br><span class="line"><span class="comment">#table_cache我也通过登录数据库查看了，但是不知道怎么修改</span></span><br><span class="line"><span class="comment">#反正这个错误对系统使用无影响......不搞了</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>lims</category>
      </categories>
      <tags>
        <tag>lims</tag>
      </tags>
  </entry>
  <entry>
    <title>安装elabFTW</title>
    <url>/2020/09/08/%E5%AE%89%E8%A3%85elabFTW/</url>
    <content><![CDATA[<h3 id="安装">安装</h3>
<p>根据这个<a href="https://doc.elabftw.net/install.html">安装文档</a>的安装步骤使用docker方法安装在ubuntu系统上</p>
<h3 id="配置">配置</h3>
<p>在安装过程中，我设置的配置如下</p>
<a id="more"></a>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">主要配置文件在/etc/elabftw.yml</span><br><span class="line"></span><br><span class="line">包含elabftw的数据(mysql+上传的文件)在/var/elabftw</span><br><span class="line"></span><br><span class="line">备份文件在/var/backups/elabftw</span><br><span class="line"></span><br><span class="line">我的ip:x.x.x.254</span><br><span class="line"></span><br><span class="line">使用https</span><br></pre></td></tr></table></figure>
<p>但是在安装的时候失败了！</p>
<p>原因和解决办法，<a href="https://github.com/elabftw/elabftw/issues/849">这里</a>有人提问了并有解答</p>
<hr>
<h3 id="重装">重装</h3>
<p>💥前提：删除之前的软件和配置文件</p>
<blockquote>
<p>删除的软件和配置文件是在之前的安装过程中，自己配置指定的安装目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -L https://get.elabftw.net -o elabctl</span><br><span class="line">chmod +x elabctl</span><br><span class="line">sudo cp elabctl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">elabctl logs</span><br><span class="line"><span class="comment">#开始安装</span></span><br><span class="line">elabctl install</span><br><span class="line"></span><br><span class="line"><span class="comment">#我使用disable https的配置后面出问题了</span></span><br><span class="line"> eLabFTW works only <span class="keyword">in</span> HTTPS. Please <span class="built_in">enable</span> HTTPS on your server. Or click this link : http://14.23.114.254:6006</span><br><span class="line"> </span><br><span class="line"><span class="comment">#开启elabctl</span></span><br><span class="line">elabctl start</span><br><span class="line"><span class="comment">#如果数据库端口3306被占用或者想改端口，</span></span><br><span class="line"><span class="comment">#都可以到/etc/elabctl.yml文件中修改</span></span><br><span class="line"><span class="comment">#修改端口号</span></span><br><span class="line">	ports:</span><br><span class="line">        <span class="comment"># if you want elabftw to run on a different port, change the first number</span></span><br><span class="line">        <span class="comment"># host:container</span></span><br><span class="line">        - <span class="string">&#x27;&lt;your-port&gt;:443&#x27;</span></span><br><span class="line"><span class="comment">#修改数据库端口</span></span><br><span class="line">		<span class="comment"># expose should work, but sometimes it doesn&#x27;t so use full port mapping</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;&lt;your-db-port&gt;:3306&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后一步</span></span><br><span class="line">docker <span class="built_in">exec</span> -it elabftw bin/install start</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>lims</category>
      </categories>
      <tags>
        <tag>lims</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Galaxy</title>
    <url>/2020/09/08/%E5%AE%89%E8%A3%85Galaxy/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>安装<span class="ljspan ljspan-reverse"><a href="https://github.com/galaxyproject/galaxy">Galaxy</a></span>，使用Conda,因为他需要一个特定的python环境，为了不与服务器主机产生耦合或者冲突，最好使用conda构建一个环境给你的<span class="ljspan ljspan-reverse"><a href="https://github.com/galaxyproject/galaxy">Galaxy</a></span>使用吧😋</p>
<a id="more"></a>
<h2 id="配置">配置</h2>
<p>首先安装<strong>conda</strong>,然后配置国内镜像，最好清华的镜像，在<code>/home/luoj/.condarc</code>里面设置👇</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>
<p>你的设置跟我一样么？我的可都是清华的🎓</p>
<h2 id="运行">运行</h2>
<p>然后进入galaxy的根目录</p>
<blockquote>
<p>sh <a href="http://run.sh">run.sh</a>  #执行程序</p>
</blockquote>
<h2 id="访问">访问</h2>
<p>访问网址：<a href="http://localhost:8080">http://localhost:8080</a> ,已经被我修改为任意主机均可访问：<a href="http://14.23.114.254:8080">http://14.23.114.254:8080</a></p>
<blockquote>
<p>通过config/galaxy.yml这个配置文件，改变http配置为：http: 0.0.0.0</p>
<p>如果还需要修改端口，就直接改为：http: 0.0.0.0:[端口号]</p>
</blockquote>
<p>修改配置文件的文档在<a href="https://docs.galaxyproject.org/en/master/admin/config.html#configuration-basics">这里</a></p>
]]></content>
      <categories>
        <category>lims</category>
      </categories>
      <tags>
        <tag>lims</tag>
      </tags>
  </entry>
  <entry>
    <title>安装metalims</title>
    <url>/2020/09/08/%E5%AE%89%E8%A3%85metalims/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>由于我只想看看MetaLIMS软件为何样，故只需下载了MetaLIMS demo,所以我选择了这种方法：<a href="https://github.com/cheinle/MetaLIMS/wiki/MetaLIMS--v2.0-Hosted-Installation-(via-AWS-Lightsail)">MetaLIMS v2.0 Hosted Installation (via AWS Lightsail)</a></p>
<a id="more"></a>
<p>进入这个安装说明文档，可以注册购买云服务器，只需要安装所需的三个文件**<a href="https://github.com/cheinle/MetaLIMS/wiki/MetaLIMS--v2.0-Hosted-Installation-(via-AWS-Lightsail)#install-lamp-stack">lamp.sh</a>,<a href="https://github.com/cheinle/MetaLIMS/wiki/MetaLIMS--v2.0-Hosted-Installation-(via-AWS-Lightsail)#create-a-self-signed-ssl-certificate-for-apache-optional">apache_ssh_16.sh</a>,<a href="https://github.com/cheinle/MetaLIMS/wiki/MetaLIMS--v2.0-Hosted-Installation-(via-AWS-Lightsail)#install-metalims">metalims.sh</a>**</p>
<p>在<a href="https://github.com/cheinle/MetaLIMS/wiki">安装说明文档</a>这里，就可以下载上面的三个文件</p>
<hr>
<h2 id="安装">安装</h2>
<p><a href="http://xn--lamp-9j5f881aho2a2j6a0v6ayyp.sh">之后直接运行lamp.sh</a></p>
<p>运行期间会提示设置⚙️</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#1.第一步</span></span><br><span class="line">source lamp.sh</span><br><span class="line"><span class="meta">#中途提示输入mysql密码</span></span><br><span class="line"><span class="meta">#并且还有一些设置</span></span><br><span class="line"><span class="meta">#2.第二步</span></span><br><span class="line">source apache_ssh_16.sh</span><br></pre></td></tr></table></figure>
<p>具体配置过程可参考<a href="https://github.com/cheinle/MetaLIMS/wiki/MetaLIMS--v2.0-Hosted-Installation-(via-AWS-Lightsail)#create-a-self-signed-ssl-certificate-for-apache-optional">官方文档</a></p>
]]></content>
      <categories>
        <category>lims</category>
      </categories>
      <tags>
        <tag>lims</tag>
      </tags>
  </entry>
  <entry>
    <title>安装mediawiki</title>
    <url>/2020/09/09/%E5%AE%89%E8%A3%85mediawiki/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>安装<span class="ljspan ljspan-reverse ljspan-yellow"><a href="https://www.mediawiki.org/wiki/MediaWiki">mediawiki</a></span>很简单😀，比较难的是需要安装她所需要的软件和配置，我在ubuntu安装过几个，都成功了，但是在centos上安装时，发现web服务器和<span class="ljspan ljspan-reverse ljspan-yellow"><a href="https://www.mediawiki.org/wiki/MediaWiki">mediawiki</a></span>出现某些冲突，导致无法使用，具体什么问题，我也不清楚，可能是我的web服务器配置出问题…😩</p>
<a id="more"></a>
<h2 id="安装">安装</h2>
<p>具体安装教程看<a href="https://www.mediawiki.org/wiki/MediaWiki">官网</a>啦，得<span class="label danger">翻墙</span>哦，随让<span class="ljspan ljspan-yellow"><a href="https://github.com/wikimedia/mediawiki">github</a></span>上面也提供下载，但是没有教程阿，而且遇到问题，也没有给出解决办法，还是去<a href="https://www.mediawiki.org/wiki/MediaWiki">官网</a>吧</p>
<p>如果提示说需要安装composer，<a href="https://www.mediawiki.org/wiki/MediaWiki">官网</a>也有提供下载安装的方法</p>
<p>然后用composer安装一些依赖，如果这时候无法安装，出现内存不够（重启系统）或下载失败（修改composer镜像），这些都可以通过百度一一解决；但是修改composer镜像比较麻烦💩</p>
<p>在修改镜像过程中，如果提示无法修改，出现类似问题😵：<strong>Could not read /home/用户名/.composer/config.json</strong></p>
<blockquote>
<p><a href="https://developer.aliyun.com/composer">这里</a>是阿里云提供的修改镜像的方法💅</p>
</blockquote>
<p>那么就修改一下<code>/home/用户名/.composer/config.json</code>和<code>/home/用户名/.composer/auth.json</code>的权限为777再重新运行composer 就应该可以了</p>
<hr>
<h2 id="mediawiki语法">mediawiki语法</h2>
<ol>
<li>__mediawiki__设置模板时，直接在搜索框输入“<em>Template:模板名</em>”就可以创建模板了，__调用模板__的方法为:[[Template:模板名]];</li>
<li>修改皮肤的样式可通过在搜索中输入__MediaWiki:Vector.css__来找到对应的皮肤css样式文件后，修改整个皮肤的样式</li>
<li>也可以通过在搜索框中输入__MediaWiki:Common.css__进入修改页面来设置全局的样式；</li>
<li><code>&#123;&#123;&#123;1&#125;&#125;&#125;</code>表示参数，模板1引用参数可以使用<code>&#123;&#123;模板2|参数名=参数&#125;&#125;</code>来引入；</li>
<li>在__mediawiki__中[[image/file]]表示链接🔗</li>
<li><strong><code>&#123;&#123;#while&#125;&#125;</code><strong>和</strong><code>&#123;&#123;#vardefine&#125;&#125;</code><strong>等都是</strong>解析器函数</strong>，<a href="%5Bhttps://www.huijiwiki.com/wiki/%E5%B8%AE%E5%8A%A9:%E8%A7%A3%E6%9E%90%E5%99%A8%E5%87%BD%E6%95%B0#var.E7.B3.BB.E5.88.97.E5.87.BD.E6.95.B0%5D(https://www.huijiwiki.com/wiki/%E5%B8%AE%E5%8A%A9:%E8%A7%A3%E6%9E%90%E5%99%A8%E5%87%BD%E6%95%B0#var.E7.B3.BB.E5.88.97.E5.87.BD.E6.95.B0)">参考文档在这里</a></li>
<li>__vertical-align__元素是设置垂直对齐属性的，有baseline/top/middle/bottom/text-top/text-bottom等。</li>
</ol>
<hr>
<h2 id="重装mediawiki">重装mediawiki</h2>
<h3 id="如果只是想要升级"><strong>如果只是想要升级</strong></h3>
<p>那么简单，步骤如下🐾</p>
<ol>
<li>输入网址：<code>http://ip:端口/项目/mw-config</code></li>
<li>在<span class="label warning">LocalSettings.php</span>中查找一个wgUpgrade的参数，然后把它复制后填入网页中，就可以了</li>
</ol>
<h3 id="如果想要连数据库等重要配置都重置">如果想要连数据库等重要配置都重置</h3>
<p>把项目的<span class="label warning">LocalSettings.php</span>文件给删了</p>
<p>输入网址：<code>http://ip:端口/项目/mw-config</code></p>
<p>根据指引来配置项目，配置数据库的前提是提前配置好mysql数据库</p>
<p>配置数据库的需求：</p>
<ul>
<li>
<p>数据库的名称</p>
</li>
<li>
<p>对应数据库指定的用户名和密码</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>安装OpenELIS</title>
    <url>/2020/09/08/%E5%AE%89%E8%A3%85OpenELIS/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>由于安装tomcat会导致apache失效😿</p>
<p>所以我使用虚拟机来安装这个软件，也就是说提供一个全新的环境。安装教程在<a href="https://docs.google.com/document/d/1fv-Zu41ti8yUVWusjd-mAK7YZLI0c4DMPxg-BzL7RUw/edit">这里</a></p>
<a id="more"></a>
<p>服务器版本ubuntu16.04 LTS,但是在执行过程中，发现程序没有帮我安装上tomcat，导致无法安装成功😭</p>
<p>报错如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The following <span class="built_in">command</span> may take a few minutes to complete.  Please take a short <span class="built_in">break</span> until it finishes</span><br><span class="line">java -jar  ./lib/liquibase-1.9.5.jar --defaultsFile=liquibaseInstall.properties --contexts=ci_regional --password=cUpHBdzgWyae --username=clinlims  update &gt;&gt; .././<span class="built_in">log</span>/installer.log 2&gt;&amp;3</span><br><span class="line">sudo systemctl stop tomcat</span><br><span class="line">Failed to stop tomcat.service: Unit tomcat.service not loaded.</span><br><span class="line">cp: cannot create regular file <span class="string">&#x27;/usr/share/tomcat8.5/lib/&#x27;</span>: Not a directory</span><br><span class="line">cp: cannot create regular file <span class="string">&#x27;/usr/share/tomcat8.5/conf/Catalina/localhost/&#x27;</span>: No such file or directory</span><br><span class="line">chown: cannot access <span class="string">&#x27;/usr/share/tomcat8.5/conf/Catalina/localhost/CDI_RegLabOpenElis.xml&#x27;</span>: No such file or directory</span><br><span class="line">cp ./warFiles/CDI_RegLabOpenElis.war /usr/share/tomcat8.5/webapps/</span><br><span class="line">cp: cannot create regular file <span class="string">&#x27;/usr/share/tomcat8.5/webapps/&#x27;</span>: Not a directory</span><br><span class="line">Failed to start tomcat.service: Unit tomcat.service not found.</span><br><span class="line">Installing backup</span><br><span class="line">Checking <span class="keyword">for</span> curl</span><br><span class="line">/usr/bin/curl</span><br><span class="line">Curl found, continuing with backup installation</span><br><span class="line">Checking <span class="keyword">if</span> crosstab is installed <span class="keyword">in</span> Postgres</span><br><span class="line">Crosstabs are installed</span><br><span class="line">luoj@luoj-VirtualBox:~/CDI_RegLabOpenElis/linux$ <span class="built_in">cd</span> /usr/share/tomcat8.5/</span><br><span class="line">luoj@luoj-VirtualBox:/usr/share/tomcat8.5$ ll</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x   2 tomcat tomcat  4096 Apr 28 09:23 ./</span><br><span class="line">drwxr-xr-x 305 root   root   12288 Apr 28 09:23 ../</span><br><span class="line">luoj@luoj-VirtualBox:/usr/share/tomcat8.5$ java -V</span><br><span class="line">Unrecognized option: -V</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无法成功安装tomcat，可能配置文件里面出错了，这是采用puppet来自动安装软件，包括postgressql等，唯独tomcat安装失败</p>
</blockquote>
<hr>
<h3 id="重新安装">#重新安装</h3>
<p><a href="https://docs.google.com/document/d/1fv-Zu41ti8yUVWusjd-mAK7YZLI0c4DMPxg-BzL7RUw/edit">安装说明文档</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#现在根目录新建一个文件夹web</span></span><br><span class="line">sudo mkdir web</span><br><span class="line"><span class="comment">#测试网络是否联通</span></span><br><span class="line">ping 8.8.8.8</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>由于提供的程序无法安装tomcat，所以这里需要手动<a href="/2020/09/08/Tomcat%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%85%8D%E7%BD%AE/">安装tomcat</a></p>
<p>先安装tomcat后,再继续后面的操作</p>
<p>OpenElis下载地址</p>
<p><a href="https://www.dropbox.com/s/syafyqxhu212nvp/CDI_RegLabOpenElis_9.1_Installer.tar.gz?dl=0&amp;file_subpath=%2FCDI_RegLabOpenElis%2Flinux">地址一</a></p>
<p><a href="http://openelisglobal.org/">地址二</a></p>
<h2 id="安装">安装</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装必备的系统软件</span></span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install python python-lxml</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载自动化配置工具</span></span><br><span class="line">sudo git <span class="built_in">clone</span> --recursive \</span><br><span class="line">https://github.com/I-TECH-UW/appliance-setup.git /opt/appliance-setup</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装软件所需的辅助软件，像数据库，web服务器等等</span></span><br><span class="line">sudo APPLIANCE_COMPONENTS=<span class="string">&quot;openelis&quot;</span> /opt/appliance-setup/bin/appliance-setup --webapps=/web --clientcerts=default --keystorepass=changeme apply</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载OpenElis的安装包</span></span><br><span class="line"><span class="comment">#可通过官网直接下载</span></span><br><span class="line"><span class="comment">#解压到家目录</span></span><br><span class="line">tar -xzf CDI_RegLabOpenElis_9.1_Installer.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/CDI_RegLabOpenElis/linux/</span><br><span class="line">sudo python setup_OpenELIS.py -install</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问浏览器http://ip:8080/CDI_RegLabOpenElis/LoginPage.do</span></span><br><span class="line">登录账号</span><br><span class="line">login name: admin password: adminADMIN!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>lims</category>
      </categories>
      <tags>
        <tag>lims</tag>
      </tags>
  </entry>
  <entry>
    <title>安装mysql</title>
    <url>/2020/09/10/%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h2 id="下载">下载</h2>
<ol>
<li>
<p>在<span class="ljspan ljspan-reverse"><a href="https://dev.mysql.com/downloads/repo/apt/">mysql官网</a></span>下载mysql的apt软件包📦</p>
<div class="note primary">
            <p>Note:在官网下载时，如果采用复制链接下载，对于复制download的链接地址是错误的，需要点击进入，复制里面的“<strong><a href="https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb">No thanks, just start my download.</a></strong>”，这个才是真正的链接地址</p>
          </div>
</li>
</ol>
<a id="more"></a>
<ol start="2">
<li>也可通过wget直接下载🙂</li>
</ol>
<blockquote>
<p>比较简单，配置文件都自动设置好，包括设置环境变量等等</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget -c https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb</span><br><span class="line"><span class="comment">#deb包的当前目录中，执行如下(记得替换w.x.y)</span></span><br><span class="line">sudo dpkg -i mysql-apt-config_w.x.y-z_all.deb</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新apt-get仓库</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装">安装</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装过程中，弹出窗口两次设置密码</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="错误🏴">错误🏴</h2>
<p>如遇到dpkg的错误，需要更新dpkg包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在/var/lib/dpkg/下，拷贝info目录到info_old</span></span><br><span class="line">sudo mv /var/lib/dpkg/inf /var/lib/dpkg/info_old </span><br><span class="line"><span class="comment">#新建一个info目录</span></span><br><span class="line">sudo mkdir /var/lib/dpkg/info</span><br><span class="line"><span class="comment">#更新apt-get包,并安装上文出现错误的安装包</span></span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get -f install mysql-community-server</span><br><span class="line">然后移动所有新生成的文件包到info_old目录中</span><br><span class="line">mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old</span><br><span class="line"><span class="comment">#删除info目录，给info_old改名为info</span></span><br><span class="line">sudo rm -rf /var/lib/dpkg/info</span><br><span class="line">sudo mv /var/lib/dpkg/info_old /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新执行一遍</span></span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"><span class="comment">#没什么问题</span></span><br><span class="line"><span class="comment">#但是没有自动启动msyql服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>其实，一般mysql遇到问题，都可以在日志文件中找到，比如我遇到的一个问题…=_=’’</p>
          </div>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">2020-03-26T06:52:46.063437Z</span> <span class="number">0</span> [<span class="string">ERROR</span>] <span class="string">Can&#x27;t</span> <span class="attr">start server: Bind on TCP/IP port:</span> <span class="string">Permission</span> <span class="string">denied</span></span><br><span class="line"><span class="number">2020-03-26T06:52:46.063462Z</span> <span class="number">0</span> [<span class="string">ERROR</span>] <span class="attr">Do you already have another mysqld server running on port:</span> <span class="number">3306</span> <span class="string">?</span></span><br><span class="line"><span class="number">2020-03-26T06:52:46.063487Z</span> <span class="number">0</span> [<span class="string">ERROR</span>] <span class="string">Aborting</span></span><br></pre></td></tr></table></figure>
<p><span class="ljspan ljspan-red">解决办法</span>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原来我无法通过ssh方式登录，使用localhost本机，就可以登陆了，但是还有个错误，可通过查看my.cnf文件查看，也有可能是mysqld.cnf等等，反正看到有配置datadir和socket等字眼的文件就是了</span></span><br><span class="line"><span class="comment">#进入my.cnf然后如果看到bind-address   = 127.0.0.1，就注销掉，这样就可以远程开启mysql服务了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看占用3306端口的程序</span></span><br><span class="line">ps -aux |grep mysql</span><br><span class="line"><span class="comment">#如过被占用就用命令kill杀死进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启数据库服务</span></span><br><span class="line">sudo service mysql start </span><br><span class="line"></span><br><span class="line"><span class="comment">#使用root用户登录</span></span><br><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改root密码(这里是修改当前用户密码的用户，5.7.29指定的方式，使用update/set都不行)</span></span><br><span class="line">alter user user() identified by <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号开发知识点</title>
    <url>/2020/09/11/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="微信浏览器的限制">微信浏览器的限制</h2>
<h3 id="不具备下载功能💩">不具备下载功能💩</h3>
<p>想要在微信公众号的网页里面设置链接🔗，下载文件，但是微信公众号不具备下载功能，所以就无法实现下载；就算设置了“使用手机📱浏览器打开”，也无法“一步到位”实现下载，<a id="more"></a>因为我下载的东西是根据用户信息对应来下载的， 而且跳转到其他浏览器，会导致<code>session</code>和<code>cookie</code>都失效了💅，这就让个人信息认证无法实现，导致无法实现下载。</p>
<h3 id="无法通过Button提交表单💨">无法通过Button提交表单💨</h3>
<p>微信公众号网页实在是太恶心了😡，<code>button</code>的<code>submit</code>功能行不通，无法提交表单数据。我只能采用<code>Javascript的Ajax方法</code>，通过<code>onclick</code>来提交表单数据</p>
<h3 id="只限于微信浏览器🗯">只限于微信浏览器🗯</h3>
<p>在<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">微信公众号开发文档</a>里面,<span class="label warning">第一步：用户同意授权，获取code</span>这里可以了解到获取code的方法</p>
<p>但是跳转这里会认证你的设备，如果不是微信浏览器，那就会提示<span class="label success">请在微信客户端打开链接</span>。也就是无法打开你所想要打开的页面</p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>程序启动的方法</title>
    <url>/2020/09/21/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>启动关闭apache、mysql等时，网友有时候用 <span class="ljspan ljspan-reverse ljspan-blue">systemctl</span>有时候却用 <span class="ljspan ljspan-reverse ljspan-red">service</span>，我觉得很奇怪，甚至还有用<code>/etc/init.d/xxx start</code>的</p>
<p>所以我觉得有必要进行了解和认识这到底是怎么回事。</p>
<a id="more"></a>
<p>其实他们都属于某种开启启动方式。<span class="ljspan ljspan-blue">systemd</span>和 <span class="ljspan ljspan-red">systemV</span>知道吧，其实就是这种启动方式的不同而已，听过还有一种 <span class="ljspan ljspan-green">UpStart</span>的，哥不清楚，也没兴趣，等接触过再说吧，这两个就够我看的了</p>
<p>关于 <span class="ljspan ljspan-blue">systemd</span>、<span class="ljspan ljspan-red">sysvinit</span>和 <span class="ljspan ljspan-green">UpStart</span>的详细说明，可参考如下文章</p>
<ol>
<li>
<p><a href="https://linux.cn/article-4422-1.html">浅析 Linux 初始化 init 系统: sysvinit</a></p>
</li>
<li>
<p><a href="https://linux.cn/article-4423-1.html">浅析 Linux 初始化 init 系统: UpStart</a></p>
</li>
<li>
<p><a href="https://linux.cn/article-4424-1.html">浅析 Linux 初始化 init 系统: Systemd</a></p>
</li>
</ol>
<hr>
<h2 id="systemctl">systemctl</h2>
<p>这是属于 <span class="ljspan ljspan-blue">systemd</span>的开机方式</p>
<h3 id="设置开机自启动-mariadb">设置开机自启动(mariadb)</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前提！！！</span></span><br><span class="line"><span class="comment">#RHEL,Centos,Fedora等系统</span></span><br><span class="line"><span class="comment">#mariadb.service被安装到/usr/lib/systemd/system/mariadb.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Ubuntu,Debian系统</span></span><br><span class="line">mariadb.service被安装到/lib/systemd/system/mariadb.service</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></table></figure>
<h3 id="常用命令方式">常用命令方式</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mariadb</span><br><span class="line"></span><br><span class="line">sudo systemctl stop mariadb</span><br><span class="line"></span><br><span class="line">systemctl status mariadb</span><br><span class="line"></span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="service">service</h2>
<p>这是属于 <span class="ljspan ljspan-red">systemV</span>的开机方式</p>
<h3 id="设置开机自启动-mariadb-2">设置开机自启动(mariadb)</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前提！！！</span></span><br><span class="line"><span class="comment">#mysql.server被安装到/etc/init.d/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在RHEL/Centos上</span></span><br><span class="line">chkconfig --add mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置runlevel</span></span><br><span class="line">chkconfig --level 345 mysql on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在Debian/Ubuntu上</span></span><br><span class="line">update-rc.d mysql defaults</span><br></pre></td></tr></table></figure>
<h3 id="软件常用命令方式">软件常用命令方式</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service xxx start </span><br><span class="line"></span><br><span class="line">service xxx stop</span><br><span class="line"></span><br><span class="line">service xxx status</span><br><span class="line"></span><br><span class="line">service xxx restart </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>迁移mysql数据</title>
    <url>/2020/09/10/%E8%BF%81%E7%A7%BBmysql%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="拷贝数据">拷贝数据</h2>
<p>从原来的mysql数据库datadir目录，cp出所有东西，其中最重要的，除了那些数据库数据表，还有ibdata1这个文件，和iblogfile0、ib_logfile1和ib_buffer_pool等文件，最好把整个目录都拷贝下来。<span class="label info">属性和用户权限</span>都要一并复制哦😮</p>
<a id="more"></a>
<p>在新的系统中新装一个mysql，我使用<span class="label success">APT安装模式</span>，所以目录配置都自动帮我配置好了！🙂</p>
<h2 id="卸载mariadb">卸载mariadb</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先卸载mariadb并删除相关配置文件(datadir目录)</span></span><br><span class="line">sudo apt-get purge mariadb*</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除没用的相关依赖包</span></span><br><span class="line">sudo apt-get automove </span><br><span class="line"></span><br><span class="line"><span class="comment">#验证mariadb服务是否还在</span></span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure>
<h2 id="重装mysql服务">重装mysql服务</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!!!把拷贝的datadir目录拷贝回去/var/lib/mysql</span></span><br><span class="line"><span class="comment">#datadir目录下一般包含ibdata1,iblogfile0,数据库目录等</span></span><br><span class="line">sudo cp -rpf /path/to/datadir/* /var/lib/mysql/</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加mysql-apt-仓库到系统仓库列表</span></span><br><span class="line">sudo dpkg -i /PATH/version-specific-package-name.deb</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于我是重装，之前已经配置了仓库，所以省略上一步</span></span><br><span class="line"><span class="comment">#从仓库更新包信息</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看mysql服务端口3306是否被占用</span></span><br><span class="line">ps -aux|grep mysql</span><br><span class="line"><span class="comment">#没有的话就可以了启动服务，有的话，用命令kill杀死那个进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysql服务</span></span><br><span class="line">sudo service mysql start</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试一下是否正常启动</span></span><br><span class="line">mysql --version</span><br><span class="line"><span class="comment">#看到以下版本信息就证明完成安装了！</span></span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.29, <span class="keyword">for</span> Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="忘记密码？">#忘记密码？</h2>
<p>有办法更新root用户密码的😸,别慌</p>
<p>如果root用户密码忘记，先关了mysql服务，然后到<span class="label warning"> my.cnf</span>文件中做如下修改</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span><span class="comment">#在这个下面</span></span><br><span class="line">skip-grant-tables #添加一行</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后在系统中直接输入命令</p>
<blockquote>
<p>mysql -uroot    #就可以直接登录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在登录的时候更新密码</span><br><span class="line">UPDATE mysql.user SET authentication_string&#x3D;password(&#39;xxxxxx&#39;) WHERE User&#x3D;&#39;root&#39; AND Host &#x3D;&#39;localhost&#39;; </span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">#退出</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<div class="note warning">
            <p>注意!!!💥💥</p><p>更改密码后，记得注释掉skip-grant-tables;</p>
          </div>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>升级Hexo和使用备份配置文件</title>
    <url>/2020/09/04/%E5%8D%87%E7%BA%A7Hexo%E5%92%8C%E4%BD%BF%E7%94%A8%E5%A4%87%E4%BB%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="升级">升级</h2>
<p>想使用&quot;备份配置文件(Alternate Theme Config)&quot;来配置NexT主题的参数，为了以后升级该主题，避免冲突，所以打算使用官方文档推荐的<a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">Alternate Theme Config</a>,通过这份文档又可知，使用Alternate Theme Config需要使用Hexo 5.0版本，龟龟🐢🐢，那就只能更新了😭。</p>
<a id="more"></a>
<p>官方文档貌似没有，那就只能网上搜了。由于我没有什么问价放在个人博客上，就几篇指导文件，且电脑端也有存档，所以…​.​.​.😎</p>
<p>我就可以大刀阔斧地搞了💩</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#其实很简单</span></span><br><span class="line"><span class="comment">#查看当前hexo版本</span></span><br><span class="line">hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step1:进入你的hexo根目录</span></span><br><span class="line"><span class="comment">#找到package.json文件，修改该版本号</span></span><br><span class="line">- <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^4.2.0&quot;</span></span><br><span class="line">+ <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span></span><br><span class="line"><span class="comment">#保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Step2:使用npm升级</span></span><br><span class="line">npm upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step3:如果提示有依赖需要修复，按提示修复，一般为</span></span><br><span class="line">npm audit fix</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step4：如果有关于配置文件警告之类的，记得修改</span></span><br><span class="line">WARN  Deprecated config detected: <span class="string">&quot;use_date_for_updated&quot;</span> is deprecated, please use <span class="string">&quot;updated_option&quot;</span> instead. See https://hexo.io/docs/configuration <span class="keyword">for</span> more details.</span><br><span class="line"><span class="comment">#像上面的警告就是说配置_config.yml文件中&quot;use_date_for_updated&quot;已经被废弃，改用&quot;updated_option&quot;来配置，修改后保存就可以了。可以通过https://hexo.io/docs/configuration了解详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再次检查hexo版本</span></span><br><span class="line">hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">#生成静态文件并开启本地服务</span></span><br><span class="line">hexo g &amp;&amp; hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="使用备份配置文件">使用备份配置文件</h2>
<p><span class="ljspan ljspan-blue"><a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">Hexo官方文档</a></span>和<span class="ljspan ljspan-black"><a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">NexT官方文档</a></span>写得很清楚</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在根目录_config.yml结尾中填写主题配置参数</span></span><br><span class="line">+ theme_config:</span><br><span class="line"><span class="comment">#把theme config file文件所有内容都复制到theme_config下方。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以了，so easy!</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Attention​!📢</strong>:Hexo生成和部署的时候记得也加上<code>--config xxx</code>哦，不然后面的问题让你头疼😵！</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Baobab</title>
    <url>/2020/09/08/%E5%AE%89%E8%A3%85Baobab/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>安装教程按照官网的<span class="ljspan ljspan-blue"><a href="https://github.com/BaobabLims/baobab.lims">安装步骤</a></span>，采用docker的方式就可以完成</p>
<a id="more"></a>
<h3 id="配置">配置</h3>
<p>由于8080端口🌎一般都会被某些软件占用，所以这里面的端口映射需要修改，我想把设置服务器端口对应docker的端口都为：8090</p>
<p>在执行以下命令的时候，发现下载速度很慢🐢</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8090:8090 quay.io/baobab-lims/baobab-lims</span><br></pre></td></tr></table></figure>
<p>于是配置了镜像加速，网上有<a href="%5Bhttps://vuepress.mirror.docker-practice.com/install/mirror.html#ubuntu-16-04-%E3%80%81debian-8-%E3%80%81centos-7%5D(https://vuepress.mirror.docker-practice.com/install/mirror.html#ubuntu-16-04-%E3%80%81debian-8-%E3%80%81centos-7)">教程</a></p>
<hr>
<h3 id="安装">安装</h3>
<p>重新执行一遍</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 8090:8090 quay.io/baobab-lims/baobab-lims</span><br></pre></td></tr></table></figure>
<p>成功了😃</p>
<img src="/assets/img/Baobab执行结果.png"  />
<p>但是使用网址登陆不上，难道容器不能用吗❓坑爹😭</p>
<hr>
<h3 id="结果">结果</h3>
<ul>
<li>
<p>使用docker安装，网址能登录，提示连接被重置的状态，而内网计算机无法连接网页的状态。</p>
</li>
<li>
<p>改用Docker-compose安装—安装失败</p>
</li>
</ul>
<hr>
<h3 id="解决办法">解决办法</h3>
<p>在<span class="label info">2020/03/13</span> 通过卸载之前的容器，然后我<span class="label danger">修改docker镜像仓库为国内阿里的仓库</span>，重新下载baobab镜像文件,然后让系统端口<span class="label default">映射自动设置</span>，然后就可以通过外网访问了😅！</p>
]]></content>
      <categories>
        <category>lims</category>
      </categories>
      <tags>
        <tag>lims</tag>
      </tags>
  </entry>
  <entry>
    <title>远程登录服务器</title>
    <url>/2020/09/09/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>想使用xshell软件远程登录服务器，一般使用ssh来连接，所以需要下载ssh哦😒</p>
<a id="more"></a>
<h2 id="安装SSH">安装SSH</h2>
<p>首先必须下载ssh服务器端,</p>
<p>我的系统是ubuntu18.04,所以采用apt-get下载安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看服务器时候有openssh软件包</span></span><br><span class="line">sudo dpkg list |grep openssh</span><br><span class="line"><span class="comment">#下载安装openssh-server软件包</span></span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<h2 id="配置SSH">配置SSH</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改到配置文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#xshell转发开启</span></span><br><span class="line">X11Forwarding yes</span><br><span class="line"><span class="comment">#开启用户密码认证</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="comment">#开启用户远程登录,username为你的用户名</span></span><br><span class="line">AllowUsers username</span><br><span class="line"><span class="comment">#设置断开连接时间，二者相乘为客户端没有响应后断开连接的具体时间</span></span><br><span class="line"><span class="comment">#每秒钟发送一起请求给客户端（单位为秒）</span></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line"><span class="comment">#客户端没有响应的最大数</span></span><br><span class="line">ClientAliveCountMax 120</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="到底有没有SSH❔">#到底有没有SSH❔</h3>
<p>新装的系统，在<code>/etc/init.d/</code>路径下，没有找到ssh文件</p>
<p>但是,系统里面有ssh啊，​看👇</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ whereis ssh</span><br><span class="line">ssh: /usr/bin/ssh /etc/ssh  /ssh/share/man/man1/ssh1.gz</span><br></pre></td></tr></table></figure>
<p>可是呢</p>
<p><code>service ssh start</code> 和 <code>systemctl start ssh.service </code>都行不通</p>
<p>😵那到底时怎么一回事？？？</p>
<p>原来原装的系统里面有openssh-client，而没有openssh-server,所以就外网就无法通过ssh连接上这个服务器啦！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机的网络</title>
    <url>/2020/09/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="分类">分类</h2>
<p>虚拟机的网络分好几种💬</p>
<p>现在我只关注两种可以上网的模式：<span class="ljspan ljspan-blue">桥接网络</span>、<span class="ljspan ljspan-red">网络地址转换NAT</span>;</p>
<p>这两种都能够实现网络功能，具体讲一讲😃</p>
<a id="more"></a>
<p>桥接网络：其实就是给你的虚拟机分配一个<span class="label info">局域网</span>地址，一个独立的局域网</p>
<p>网络地址转换NAT:其实是一个虚拟的网络地址，不存在的，他的实际网络地址是你的<span class="label success">电脑主机IP</span>,也就是主机的局域网地址</p>
<p>💥故在设置路由IP端口转换的时候，就有不同点了</p>
<ol>
<li>
<p>桥接网络：简单，直接把他的IP地址和端口在路由上映射就可以了</p>
</li>
<li>
<p>网络地址转换NAT:</p>
<ul>
<li>
<p>在这台虚拟机的网络设置中设置端口转发到你的主机端口</p>
</li>
<li>
<p>再把刚刚的设置的主机端口在路由器映射就可以了</p>
</li>
</ul>
</li>
</ol>
<div class="note info">
            <p>Note：网络地址转换比桥接地址多了一层端口的映射</p>
          </div>
<hr>
<h2 id="示例：网络地址转换NAT">示例：网络地址转换NAT</h2>
<blockquote>
<p>我使用的是VM virtualBox</p>
</blockquote>
<h4 id="步骤1：打开任意一台虚拟机–设置–网络">步骤1：打开任意一台虚拟机–设置–网络</h4>
<p><img src="/assets/img/%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C1.png" alt=""></p>
<h4 id="步骤2：点击高级–端口转发">步骤2：点击高级–端口转发</h4>
<p><img src="/assets/img/%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C2.png" alt=""></p>
<h4 id="步骤3：在端口转发规则这里就可以设置端口的转发到主机上啦">步骤3：在端口转发规则这里就可以设置端口的转发到主机上啦</h4>
<p><img src="/assets/img/%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C3.png" alt=""></p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>查看端口占用</title>
    <url>/2020/09/08/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>查看端口占用 或 进程ID/名的方法有好几种，以下分别举例</p>
</blockquote>
<h4 id="第一种办法：">第一种办法：</h4>
<span class="label info">sudo netstat -nltp|grep 端口号/进程名</span>
<p>eg1：<code>sudo netstat -nltp|grep 3306</code></p>
<p>eg2:   <code>sudo netstat -ntlp|grep mysql</code></p>
<a id="more"></a>
<h4 id="第二种办法：">第二种办法：</h4>
<span class="label success">sudo lsof -i :端口号</span>
<p>eg:   <code>sudo lsof -i :3306</code></p>
<div class="note default">
            <h4 id="Note">Note:</h4><p>ps只能查看进程名和进程ID</p>
          </div>
<h4 id="第三种办法：">第三种办法：</h4>
<span class="label warning">sudo ps -aux|grep 进程名</span>
<p>eg:   <code>sudo ps -aux|grep mysql</code></p>
<blockquote>
<p>都加sudo的原因是某些程序的查看需要root权限阿！😂</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘检测和数据备份</title>
    <url>/2020/09/09/%E7%A3%81%E7%9B%98%E6%A3%80%E6%B5%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h2 id="检测不到硬盘">检测不到硬盘</h2>
<p>同事让我看看服务器，想要利用磁盘<code>/dev/sdb</code>，但是呢，不管是<span class="label info">fdisk -l</span> 还是<span class="label success">df -h</span>命令都查不到挂载或者未挂载的磁盘sdb和这个硬盘的分区信息，但是当我去查看这个硬盘的时候，发现它很烫，证明硬盘连接没问题的，那怎么就检测不到呢?真的不知道😵</p>
<a id="more"></a>
<p>按道理损坏的硬盘也是可以找到的啊，只是坏了而已！</p>
<p>最后发现，果然是数据线连接问题😩，重新插硬盘的数据线，就可以检测到这个新的硬盘了😃</p>
<p>可通过开机<span class="label primary">按F2</span>进入BIOS界面查看相关的设备情况</p>
<hr>
<h2 id="备份数据">备份数据</h2>
<p>考虑到系统可能出错，所以想给旧磁盘的数据做备份。</p>
<p>使用<span class="label danger">dump</span> 命令 ：</p>
<p><code>dump -0u -f 备份文件名 备份源文件系统</code></p>
<div class="note info">
            <h3 id="Note">Note:</h3><p>备份文件名如在目录里面，需要带上目录</p><p>备份原文件系统，使用设备名或者挂载的目录都OK</p>
          </div>
<p><strong>示例</strong>：</p>
<blockquote>
<p>这里选取两个系统上的空白分区sda1和sda2</p>
</blockquote>
<p>分区sda1 (100G) 用作备份分区  把<code>/dev/sda1</code>挂载到 <code>/data1/backup</code> 上</p>
<p>分区sda2 (300G) 用作安装软件的数据存储  <code>/dev/sda2</code>挂载到<code>/data1 </code>上</p>
<div class="note success">
            <h3 id="Note-其实系统做了两份备份">Note:其实系统做了两份备份</h3><p>一份在<code>data1/lost+found/sdb1.dump</code><br>另一份在<code>/data1/backup/sdb1.dump.1</code></p>
          </div>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>验证文件的完整性</title>
    <url>/2020/09/19/%E9%AA%8C%E8%AF%81%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7/</url>
    <content><![CDATA[<h2 id="前言"># 前言</h2>
<p>验证文件完整性的方法有很多种，在这里我列举我遇到的几种我经常遇到的验证方法！👊，有sha1，sha256，sha512和MD5,PGP等💅</p>
<a id="more"></a>
<h2 id="sha1验证">sha1验证</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sha1sum file</span><br></pre></td></tr></table></figure>
<h2 id="sha256-验证">sha256 验证</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">shasum -a 256 -c x.x.x.sha256(下载的验证文件) </span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl sha256 -r x.x.x.x(下载的文件)</span><br></pre></td></tr></table></figure>
<h2 id="sha512验证">sha512验证</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sha512sum file</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="MD5验证">MD5验证</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ md5sum file</span><br><span class="line">a612cd5d162e4620b442b0ff3474bf98  file</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="PGP验证">PGP验证</h2>
<blockquote>
<p>首先得先下载x.x.x.x(所要下载的文件)和x.x.x.x.asc(下载得验证文件)</p>
</blockquote>
<h3 id="第一步：使用GPG-The-GNU-Privacy-Guard-来验证。">第一步：使用GPG(The GNU Privacy Guard)来验证。</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% gpg --verify httpd-2.4.18.tar.gz.asc httpd-2.4.18.tar.gz</span><br><span class="line">gpg: Signature made Tue Dec  8 21:32:07 2015 CET using RSA key ID 791485A8</span><br><span class="line">gpg: Can<span class="string">&#x27;t check signature: public key not found</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的情况是没有版本的管理者公用钥匙791485A8</p>
<p>一般要去key server获取，比如最受欢迎的<code>pgpkeys.mit.edu</code></p>
</blockquote>
<h3 id="第二步：获取公共钥匙">第二步：获取公共钥匙</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% gpg --keyserver pgpkeys.mit.edu --recv-key 791485A8</span><br><span class="line">gpg: requesting key 791485A8 from HKP keyserver pgpkeys.mit.edu</span><br><span class="line">gpg: trustdb created</span><br><span class="line">gpg: key 791485A8: public key <span class="string">&quot;Jim Jagielski &lt;jim@apache.org&gt;&quot;</span> imported</span><br><span class="line">gpg: key 791485A8: public key <span class="string">&quot;Jim Jagielski &lt;jim@apache.org&gt;&quot;</span> imported</span><br><span class="line">gpg: Total number processed: 2</span><br><span class="line">gpg:               imported: 2  (RSA: 2)</span><br></pre></td></tr></table></figure>
<p>一般通过这个方法就可以获取到公共钥匙了，但是上面获取的钥匙却有两个😦</p>
<blockquote>
<p>不管怎样，再来认证一次</p>
</blockquote>
<h3 id="第三步：再次验证">第三步：再次验证</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% gpg --verify httpd-2.4.18.tar.gz.asc httpd-2.4.18.tar.gz</span><br><span class="line">gpg: Signature made Tue Dec  8 21:32:07 2015 CET using RSA key ID 791485A8</span><br><span class="line">gpg: Good signature from <span class="string">&quot;Jim Jagielski &lt;jim@apache.org&gt;&quot;</span></span><br><span class="line">gpg:             aka <span class="string">&quot;Jim Jagielski &lt;jim@jimjag.com&gt;&quot;</span></span><br><span class="line">gpg:             aka <span class="string">&quot;Jim Jagielski &lt;jim@jaguNET.com&gt;&quot;</span></span><br><span class="line">gpg:             aka <span class="string">&quot;Jim Jagielski &lt;jimjag@gmail.com&gt;&quot;</span></span><br><span class="line">gpg: checking the trustdb</span><br><span class="line">gpg: no ultimately trusted keys found</span><br><span class="line">gpg: WARNING: This key is not certified with a trusted signature!</span><br><span class="line">gpg:          There is no indication that the signature belongs to the</span><br><span class="line">owner.</span><br><span class="line">Fingerprint: A93D 62EC C3C8 EA12 DB22  0EC9 34EA 76E6 7914 85A8</span><br></pre></td></tr></table></figure>
<p>可以看到验证成功了，但是他的真实性有待商榷，从中还获取到他的<span class="label warning">指纹</span>了</p>
<h3 id="第四步：验证真实性">第四步：验证真实性</h3>
<blockquote>
<p>这一步的内容稍多，方法也有很多种</p>
</blockquote>
<p>方法一：到<span class="ljspan ljspan-yellow">PGP信任的网站</span>验证<span class="label warning">指纹</span>了，比如我下载apache，他有提供一个<a href="https://people.apache.org/keys/committer/">网站</a>给你比对指纹。题外话，其实这个网站也是不大受信任的，毕竟不是PGP提供的，apache官方给出的说法也是说要留意他们的新闻，万一他们自己的网站给黑客搞了，他们就不能保证提供指纹比对的真实性了，安全真的好重要啊🐢🐢。</p>
<p>方法二：通过gpg签名列表中的用户来确认</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% gpg --list-sigs </span><br><span class="line">pub   4096R/791485A8 2010-11-04</span><br><span class="line">uid                  Jim Jagielski (Release Signing Key) &lt;jim@apache.org&gt;</span><br><span class="line">sig          88C3A5A5 2010-11-07  Philippe M. Chiasson (Home) &lt;gozer@ectoplasm.org&gt;</span><br><span class="line">sig          4E24517C 2011-11-10  Hyrum K. Wright (Personal) &lt;hyrum@hyrumwright.org&gt;</span><br><span class="line">sig          C4FC9A65 2011-11-10  Bernd Bohmann &lt;bommel@apache.org&gt;</span><br><span class="line">sig          1F27E622 2015-04-16  Konstantin I Boudnik (Cos) &lt;cos@boudnik.org&gt;</span><br><span class="line">sig          08C975E5 2010-11-04  Jim Jagielski &lt;jim@apache.org&gt;</span><br><span class="line">sig 2        F2EFD0F0 2011-11-14  Christopher David Schultz (Christopher David Schultz) &lt;chris@christopherschultz.net&gt;</span><br><span class="line">sig 3        311A3DE5 2010-11-10  Ruediger Pluem &lt;rpluem@apache.org&gt;</span><br><span class="line">sig          64A6A0BA 2013-02-27  Steven J. Hathaway (Apache PGP) &lt;shathaway@apache.org&gt;</span><br><span class="line">sig          00A1234F 2015-04-15  Andre Arcilla &lt;arcilla@apache.org&gt;</span><br><span class="line">sig          9A59B973 2015-04-21  Stefan Sperling &lt;stsp@stsp.name&gt;</span><br><span class="line">sig          F51BB88A 2010-11-04  Sander Temme &lt;sander@temme.net&gt;</span><br><span class="line">...more signatures redacted...</span><br></pre></td></tr></table></figure>
<p>如果你的验证的文件中的用户在此列表中，那一般就能证明他确实是真实的啦，如果要保证它是否是真的，你可以直接通过邮箱联系用户，让他确证到底是不是真的咯</p>
<blockquote>
<p>其实最安全的办法当然是联系作者本人啦，但是作者一般哪有时间回复你啊，so…I have no idea!</p>
</blockquote>
<h2 id="验证成功">验证成功</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">% gpg --verify httpd-2.4.18.tar.gz.asc httpd-2.4.18.tar.gz</span><br><span class="line">gpg: Signature made Tue Dec  8 21:32:07 2015 CET using RSA key ID 791485A8</span><br><span class="line">gpg: Good signature from <span class="string">&quot;Jim Jagielski (Release Signing Key) &lt;jim@apache.org&gt;&quot;</span></span><br><span class="line">gpg:                 aka <span class="string">&quot;Jim Jagielski &lt;jim@jimjag.com&gt;&quot;</span></span><br><span class="line">gpg:                 aka <span class="string">&quot;Jim Jagielski &lt;jim@jaguNET.com&gt;&quot;</span></span><br><span class="line">gpg:                 aka <span class="string">&quot;Jim Jagielski &lt;jimjag@gmail.com&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如上所示，没有危险提示，那就表明成功啦！</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Multipart的处理方法</title>
    <url>/2020/10/21/Mutipart%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="处理Multipart的方法">处理Multipart的方法</h2>
<blockquote>
<p>关于StandardServletMultipartResolvert和CommonsMultipartResolver的两种使用方法</p>
</blockquote>
<h3 id="1-StandardServletMultipartResolvert的用法">1.StandardServletMultipartResolvert的用法</h3>
<a id="more"></a>
<p>需具备条件：servlet3.0+</p>
<ul>
<li>在springmvc容器中配置添加类对象</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在web.xml文件中的<code>&lt;servlet&gt;</code>中配置如下：</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">&lt;multipart-config&gt;</span><br><span class="line">    &lt;<span class="built_in">max</span>-<span class="keyword">file</span>-<span class="built_in">size</span>&gt;<span class="number">20848820</span>&lt;/<span class="built_in">max</span>-<span class="keyword">file</span>-<span class="built_in">size</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">max</span>-request-<span class="built_in">size</span>&gt;<span class="number">418018841</span>&lt;/<span class="built_in">max</span>-request-<span class="built_in">size</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">file</span>-<span class="built_in">size</span>-threshold&gt;<span class="number">1048576</span>&lt;/<span class="keyword">file</span>-<span class="built_in">size</span>-threshold&gt;</span><br><span class="line">&lt;/multipart-config&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-CommonsMultipartResolver的用法">2.CommonsMultipartResolver的用法</h3>
<p>需具备的条件：导入两个额外的包：<a href="https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload"><strong>commons-fileupload</strong></a>和<a href="https://mvnrepository.com/artifact/commons-io/commons-io"><strong>commons-io</strong></a></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br><span class="line">		&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> value=<span class="string">&quot;20000000&quot;</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">		&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="处理数据">处理数据</h3>
<p>我觉得都一样，只不过解析出来的MultipartHttpServletRequest不一样而已，获取数值的方式都一样的</p>
<p>法一：解析request获取/直接映射到参数上</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解析request请求</span></span><br><span class="line"><span class="keyword">MultipartHttpServletRequest </span><span class="keyword">multipartRequest </span>= (<span class="keyword">MultipartHttpServletRequest) </span>request;</span><br><span class="line"><span class="comment">#这样就可以获取到MultipartFile了</span></span><br><span class="line">Map&lt;String, <span class="keyword">MultipartFile&gt; </span>fileMap = <span class="keyword">multipartRequest.getFileMap();</span></span><br></pre></td></tr></table></figure>
<p>法二：把数据直接封装到模型类中</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">List&lt;MultipartFile&gt; files = <span class="keyword">new</span><span class="type">User</span>.getFiles();</span><br><span class="line"></span><br><span class="line"><span class="meta">#要提前封装好模型类并实现序列化	</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewUser</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">	<span class="keyword">private</span> List&lt;MultipartFile&gt; files;</span><br><span class="line">	</span><br><span class="line">	....<span class="keyword">get</span>/<span class="keyword">set</span> method...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Bootstrap-Table</title>
    <url>/2020/10/23/Bootstrap-Table/</url>
    <content><![CDATA[<h2 id="前言">#前言</h2>
<p>由于需要使用到表格的排序功能，懒于自己写就打算搞个框架，之前使用的是Bootstrap框架，想着如果它自身有，那就太棒了…还真有，(＾Ｕ＾)ノ~ＹＯ</p>
<p>它就是 <span class="ljspan ljspan-reverse ljspan-blue"><a href="https://bootstrap-table.com/docs/getting-started/introduction/">Bootstrap-Table</a></span><a id="more"></a></p>
<p><span class="ljspan ljspan-reverse ljspan-blue"><a href="https://bootstrap-table.com/docs/getting-started/introduction/">Bootstrap-Table</a></span>在页面中的使用，有多种方法，一种是直接使用HTML5的写法，直接通过<span class="label warning">data-*</span>的方式指定个中属性设置，另一种就是HTML+JS方式实现弹性设置，我用的就是第二种</p>
<p>由于数据想使用ajax异步读取，这样方便，刚好，方法 <span class="ljspan ljspan-blue">bootstrapTable</span>就有这样的功能。</p>
<p>官方文档在<a href="https://bootstrap-table.com/docs/getting-started/introduction/">这里</a>，说实话，不太喜欢，这玩意用的方式跟我不同，🐢🐢，但是还是可以当作参考的。</p>
<blockquote>
<p>先准备一个表头，也可以把表格头的信息也写在<span class="ljspan ljspan-blue">bootstrapTable</span>方法里</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;bootstrap-table&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-field</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">data-sortable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-field</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">data-sortable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-field</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">data-sortable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>开始使用 <span class="ljspan ljspan-reverse ljspan-blue">Bootstrap-Table</span></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#bootstrap-table&quot;</span>).bootstrapTable(&#123;</span><br><span class="line">		&lt;!------------发送ajax请求-----------&gt;</span><br><span class="line">		url : queryUrl,    <span class="comment">//请求后台的URL（*）</span></span><br><span class="line">		dataType:<span class="string">&quot;json&quot;</span>,		</span><br><span class="line">		contentType : <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        sidePagination : <span class="string">&quot;server&quot;</span>, <span class="comment">//分页方式：client客户端分页，server服务端分页（*）	</span></span><br><span class="line">		method : <span class="string">&#x27;POST&#x27;</span>, <span class="comment">//请求方式（*）</span></span><br><span class="line">   		&lt;!-----------------------------------&gt;		</span><br><span class="line">		search : <span class="literal">false</span>, <span class="comment">//是否显示表格搜索</span></span><br><span class="line">		showFooter : <span class="literal">false</span>, <span class="comment">//显示底部，默认不显示</span></span><br><span class="line">		sortName : <span class="string">&quot;genesId&quot;</span>,</span><br><span class="line">		sortOrder : <span class="string">&quot;desc&quot;</span>, <span class="comment">//排序方式</span></span><br><span class="line">		....</span><br><span class="line">&#125;)		</span><br></pre></td></tr></table></figure>
<blockquote>
<p>刚开始，我也不知道它如何发送请求，后面看了上面最开始部分数据的数据格式后，发现，这字段怎么跟ajax那么像，查了源码才发现这就是采用ajax的方式，参数data改为使用sidePageination来传输，分client和server两种</p>
</blockquote>
<p>除了使用使用ajax发送请求外，其他字段都是一些对表格的设计的属性，下面介绍几个</p>
<ul>
<li>
<p>sidePagination：用来设置发送数据给后台的方法选择，有“server”和“client”之分，“client”用于</p>
</li>
<li>
<p>Query Params：它就是一个发送数据给服务器的方法，也就是ajax方法中的data，前提是需要设置<code>sidePagination : &quot;server&quot;</code>；除了本身的参数，可以额外添加参数</p>
</li>
<li>
<p>Formatter：用来格式化返回的表格列的显示形式，比如加图形，改变css样式等等</p>
</li>
<li>
<p>Locale：汉化，前提是导入<a href="https://examples.bootstrap-table.com/index.html#options/table-locale.html#view-source">语言js文件</a>，而且这个文件需要再 <span class="ljspan ljspan-reverse ljspan-blue">Bootstrap-Table</span>的js文件后面</p>
</li>
</ul>
<p>发送完参数后，后面就可以获取到响应了，那响应的内容如何设置呢？</p>
<h2 id="响应数据">响应数据</h2>
<p>响应数据是json数据，后台要处理为json字符串数据后返回。然后响应的内容格式为<code>&#123;total:22,rows:&#123;&#125;&#125;</code>，我在后台需要结合 <span class="ljspan ljspan-reverse ljspan-red">pagehelper</span>的使用，获取total。这样就更加简单了😄</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring 4.0高级装配</title>
    <url>/2020/11/18/Spring-4.0%E9%AB%98%E7%BA%A7%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<h1>环境与Profile</h1>
<blockquote>
<p>Spring从3.1版本就引入了bean profile的功能</p>
</blockquote>
<h3 id="Profile用来干什么的？">Profile用来干什么的？</h3>
<p>其实就是它就是根据环境来决定该创建哪个bean，不创建哪个bean</p>
<p>不过Spring并不是在构建的时候做出这样的决策，而是<a id="more"></a>等到运行时再来确定。这样的结果就是同一个部署单元（可能会是WAR文件）能够适用于所有的环境，没有必要进行重新构建。</p>
<h2 id="配置profile-bean">配置profile bean</h2>
<h3 id="基于JavaConfig配置">基于JavaConfig配置</h3>
<p>在Java配置中，可以使用@Profile注解指定某个bean属于哪一个profile。</p>
<p>当@Profile注解应用在了类级别上。它会告诉Spring这个配置类中的bean只有在dev profile激活时才会创建。profile激活时才会创建。如果dev profile没有激活的话，那么带有@Bean注解的方法都会被忽略掉。</p>
<p>不过，从Spring 3.2开始，也可以在方法级别上使用@Profile 注解，与 @Bean注解一同使用。这样的话，就能将这两个bean的声明放到同一个配置类之中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myapp;</span><br><span class="line"><span class="keyword">import</span> javax.activation.DataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span></span><br><span class="line">  org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;</span><br><span class="line"><span class="keyword">import</span></span><br><span class="line">  org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.JndiObjectFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(destroyMethod=&quot;shutdown&quot;)</span></span><br><span class="line">  <span class="meta">@Profile(&quot;dev&quot;)</span>	</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">embeddedDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">          .setType(EmbeddedDatabaseType.H2)</span><br><span class="line">          .addScript(<span class="string">&quot;classpath:schema.sql&quot;</span>)</span><br><span class="line">          .addScript(<span class="string">&quot;classpath:test-data.sql&quot;</span>)</span><br><span class="line">          .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Profile(&quot;prod&quot;)</span>	</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">jndiDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JndiObjectFactoryBean jndiObjectFactoryBean =</span><br><span class="line">        <span class="keyword">new</span> JndiObjectFactoryBean();</span><br><span class="line">    jndiObjectFactoryBean.setJndiName(<span class="string">&quot;jdbc/myDS&quot;</span>);</span><br><span class="line">    jndiObjectFactoryBean.setResourceRef(<span class="keyword">true</span>);</span><br><span class="line">    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);</span><br><span class="line">    <span class="keyword">return</span> (DataSource) jndiObjectFactoryBean.getObject();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有个问题需要注意，尽管每个DataSource bean都被声明在一个profile中，并且只有当规定的profile激活时，相应的bean才会被创建，<strong>但是可能会有其他的bean并没有声明在一个给定的profile范围内</strong>。没有指定profile的bean始终都会被创建，与激活哪个profile没有关系。</p>
<h3 id="基于XML配置">基于XML配置</h3>
<p>除了可以为每个环境都创建一个profile XML文件，把所有的bean定义到了同一个XML文件之中，这种配置方式与定义在单独的XML文件中的实际效果是一样的。这里有三个bean，类型都是javax.sql.DataSource，并且ID都是dataSource。但是在运行时，只会创建一个bean，这取决于处于激活状态的是哪个profile。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">  xmlns:jdbc=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span><br><span class="line">  xmlns:jee=<span class="string">&quot;http://www.springframework.org/schema/jee&quot;</span></span><br><span class="line">  xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/jee</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/jee/spring-jee.xsd</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/jdbc</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;beans profile=<span class="string">&quot;dev&quot;</span>&gt;	</span><br><span class="line">    &lt;jdbc:embedded-database id=<span class="string">&quot;dataSource&quot;</span>&gt;</span><br><span class="line">      &lt;jdbc:script location=<span class="string">&quot;classpath:schema.sql&quot;</span> /&gt;</span><br><span class="line">      &lt;jdbc:script location=<span class="string">&quot;classpath:test-data.sql&quot;</span> /&gt;</span><br><span class="line">    &lt;/jdbc:embedded-database&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br><span class="line"></span><br><span class="line">  &lt;beans profile=<span class="string">&quot;qa&quot;</span>&gt;	</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span></span><br><span class="line">          destroy-method=<span class="string">&quot;close&quot;</span></span><br><span class="line">          p:url=<span class="string">&quot;jdbc:h2:tcp://dbserver/~/test&quot;</span></span><br><span class="line">          p:driverClassName=<span class="string">&quot;org.h2.Driver&quot;</span></span><br><span class="line">          p:username=<span class="string">&quot;sa&quot;</span></span><br><span class="line">          p:password=<span class="string">&quot;password&quot;</span></span><br><span class="line">          p:initialSize=<span class="string">&quot;20&quot;</span></span><br><span class="line">          p:maxActive=<span class="string">&quot;30&quot;</span> /&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br><span class="line"></span><br><span class="line">  &lt;beans profile=<span class="string">&quot;prod&quot;</span>&gt;	</span><br><span class="line">     &lt;jee:jndi-lookup id=<span class="string">&quot;dataSource&quot;</span></span><br><span class="line">                     jndi-name=<span class="string">&quot;jdbc/myDatabase&quot;</span></span><br><span class="line">                     resource-ref=<span class="string">&quot;true&quot;</span></span><br><span class="line">                     proxy-<span class="class"><span class="keyword">interface</span></span>=<span class="string">&quot;javax.sql.DataSource&quot;</span> /&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="激活profile">激活profile</h2>
<p>Spring在确定哪个profile处于激活状态时，需要依赖两个独立的属性：<strong>spring.profiles.active</strong> 和 <strong>spring.profiles.default</strong>。如果设置了spring.profiles.active属性的话，那么它的值就会用来确定哪个profile是激活的。但如果没有设置spring.profiles.active属性的话，那Spring将会查找spring.profiles.default的值。如果spring.profiles.active 和 spring.profiles.default均没有设置的话，那就没有激活的profile，因此只会创建那些没有定义在profile中的bean。</p>
<p>有多种方式来设置这两个属性：</p>
<ol>
<li>作为 DispatcherServlet的初始化参数；</li>
<li>作为Web应用的上下文参数；</li>
<li>作为JNDI条目；</li>
<li>作为环境变量；</li>
<li>作为JVM的系统属性；</li>
<li>在集成测试类上，使用@ActiveProfiles注解设置。</li>
</ol>
<p><strong>环境变量的设置</strong>：% export SPRING_PROFILES_ACTIVE=prod（设置SPRING_PROFILES_ACTIVE）</p>
<p><strong>JVM的设置</strong>：</p>
<ul>
<li>tomcat 中 catalina.bat（.sh中不用“set”） 添加JAVA_OPS。通过设置active选择不同配置文件 set JAVA_OPTS=”-Dspring.profiles.active=test”</li>
<li>eclipse 中启动tomcat。项目右键 run as –&gt; run configuration–&gt;Arguments–&gt; VM arguments中添加。local配置文件不必上传git追踪管理<br>
-Dspring.profiles.active=”local”</li>
</ul>
<h4 id="使用profiles进行测试">使用profiles进行测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes=&#123;PersistenceTestConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(&quot;dev&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistenceTest</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1>条件化的bean</h1>
<blockquote>
<p>spring4引入了@Conditional注解</p>
</blockquote>
<p>@Conditional注解可以用到带有@Bean注解的方法上。如果给定的条件计算结果为true，就会创建这个bean，否则的话，这个bean会被忽略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional(MagicExistsCondition.class)</span>	</span><br><span class="line"><span class="function"><span class="keyword">public</span> MagicBean <span class="title">magicBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从Spring 4开始，@Profile注解进行了重构，使其基于@Conditional 和 Condition实现。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(ProfileCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Profile &#123;</span><br><span class="line">  String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>处理自动装配的歧义性</h1>
<p>在第2章中，我们已经看到如何使用自动装配让Spring完全负责将bean引用注入到构造参数和属性中。自动装配能够提供很大的帮助，因为它会减少装配应用程序组件时所需要的显式配置的数量。</p>
<p>仅有一个bean匹配所需的结果时，自动装配才是有效的。如果不仅有一个bean能够匹配结果的话，这种歧义性会阻碍Spring自动装配属性、构造器参数或方法参数。</p>
<p>比如以下的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cake</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cookies</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>但是，当确实发生歧义性的时候，Spring提供了多种可选方案来解决这样的问题。你可以将可选bean中的某一个<strong>设为首选（primary）的bean</strong>，或者**使用限定符（qualifier）**来帮助Spring将可选的bean的范围缩小到只有一个bean。</p>
<h4 id="标示首选的bean">标示首选的bean</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<h4 id="限定自动装配的bean">限定自动装配的bean</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;iceCream&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是使用限定符的最简单的例子。为@Qualifier注解所设置的参数就是想要注入的bean的ID。所有使用@Component注解声明的类都会创建为bean，并且bean的ID为首字母变为小写的类名。因此，@Qualifier(“iceCream”)指向的是组件扫描时所创建的bean，并且这个bean是IceCream类的实例。</p>
<p>实际上，还有一点需要补充一下。更准确地讲，@Qualifier(“iceCream”)所引用的bean要具有String类型的“iceCream”作为限定符。如果没有指定其他的限定符的话，所有的bean都会给定一个默认的限定符，这个限定符与bean的ID相同。因此，框架会将具有“iceCream”限定符的bean注入到setDessert()方法中。这恰巧就是ID为iceCream的bean，它是IceCream类在组件扫描的时候创建的。</p>
<blockquote>
<p>基于默认的bean ID作为限定符是非常简单的，但这有可能会引入一些问题。如果你重构了IceCream类，将其重命名为Gelato的话，那此时会发生什么情况呢？如果这样的话，bean的ID和默认的限定符会变为gelato，这就无法匹配setDessert()方法中的限定符。自动装配会失败。</p>
</blockquote>
<h4 id="创建自定义的限定符">创建自定义的限定符</h4>
<p>ID作为限定符。在这里所需要做的就是在bean声明上添加@Qualifier注解。例如，它可以与@Component组合使用，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;cold&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，cold限定符分配给了IceCreambean。因为它没有耦合类名，因此你可以随意重构IceCream的类名，而不必担心会破坏自动装配。在注入的地方，只要引用cold限定符就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;cold&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用自定义的限定符注解">使用自定义的限定符注解</h4>
<p>如果需要两个限定符才能定位到相关的bean，可行吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;cold&quot;)</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;fruity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Popsicle</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>答案是不可行：Java不允许在同一个条目上重复出现相同类型的多个注解。[1]如果你试图这样做的话，编译器会提示错误。在这里，使用@Qualifier注解并没有办法（至少没有直接的办法）将自动装配的可选bean缩小范围至仅有一个可选的bean。</p>
<p>那就自己创建自定义的限定符注解咯，比如下面的**@Cold**注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD,</span></span><br><span class="line"><span class="meta">         ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cold &#123; &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="bean的作用域">bean的作用域</h2>
<p>在默认情况下，Spring应用上下文中所有bean都是作为以单例（singleton）的形式创建的。也就是说，不管给定的一个bean被注入到其他bean多少次，每次所注入的都是同一个实例。</p>
<p>在大多数情况下，单例bean是很理想的方案。初始化和垃圾回收对象实例所带来的成本只留给一些小规模任务，在这些任务中，让对象保持无状态并且在应用中反复重用这些对象可能并不合理。</p>
<p>有时候，可能会发现，你所使用的类是易变的（mutable），它们会保持一些状态，因此重用是不安全的。在这种情况下，将class声明为单例的bean就不是什么好主意了，因为对象会被污染，稍后重用的时候会出现意想不到的问题。</p>
<p>Spring定义了多种作用域，可以基于这些作用域创建bean，包括：</p>
<ol>
<li>单例（Singleton）：在整个应用中，只创建bean的一个实例。</li>
<li>原型（Prototype）：每次注入或者通过Spring应用上下文获取的时候，都会创建一个新的bean实例。</li>
<li>会话（Session）：在Web应用中，为每个会话创建一个bean实例。</li>
<li>请求（Rquest）：在Web应用中，为每个请求创建一个bean实例。</li>
</ol>
<p>单例是默认的作用域，但是正如之前所述，对于易变的类型，这并不合适。如果选择其他的作用域，要使用**@Scope<strong>注解，它可以与</strong>@Component** 或 <strong>@Bean</strong>一起使用。</p>
<blockquote>
<p>@Scope同时还有要给proxyMode属性，如需了解详情，请查阅 – [美] Craig Walls. Spring实战（第4版） (Kindle 位置 1604-1606). 人民邮电出版社. Kindle 版本.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notepad</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>使用ConfigurableBeanFactory 类的 SCOPE_PROTOTYPE常量设置了原型作用域。你当然也可以使用@Scope(“prototype”)，但是使用SCOPE_PROTOTYPE常量更加安全并且不易出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Notepad <span class="title">notepad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Notepad();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原型bean配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;notepad&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.myapp.Notepad&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>xml配置方式</p>
</blockquote>
<hr>
<h2 id="运行时值的注入">运行时值的注入</h2>
<p>当讨论依赖注入的时候，我们通常所讨论的是将一个bean引用注入到另一个bean的属性或构造器参数中。它通常来讲指的是将一个对象与另一个对象进行关联。</p>
<p>但是bean装配的另外一个方面指的是将一个值注入到bean的属性或者构造器参数中。</p>
<p>可以使用硬编码的形式，就是直接注入值，但有的时候，我们可能会希望避免硬编码值，而是想让这些值在运行时再确定。为了实现这些功能，Spring提供了两种在运行时求值的方式：</p>
<ul>
<li>
<p>属性占位符（Property placeholder）</p>
</li>
<li>
<p>Spring表达式语言（SpEL）</p>
</li>
</ul>
<p>很快你就会发现这两种技术的用法是类似的，不过它们的目的和行为是有所差别的。</p>
<h3 id="注入外部的值">注入外部的值</h3>
<p>在Spring中，处理外部值的最简单方式就是声明属性源并通过Spring的Environment来检索属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soundsystem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/com/soundsystem/app.properties&quot;)</span>	</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressiveConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  Environment env;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BlankDisc <span class="title">disc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BlankDisc(</span><br><span class="line">        env.getProperty(<span class="string">&quot;disc.title”),	</span></span><br><span class="line"><span class="string">         env.getProperty(&quot;</span>disc.artist<span class="string">&quot;));</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>在上面的例中，@PropertySource引用了类路径中一个名为app.properties的文件。它大致会如下所示： 这个属性文件会加载到Spring的Environment中，稍后可以从这里检索属性。同时，在disc()方法中，会创建一个新的BlankDisc，它的构造器参数是从属性文件中获取的，而这是通过调用getProperty()</p>
<h4 id="深入学习Spring的Environment">深入学习Spring的Environment</h4>
<p>其实getProperty()方法有四个重载的变种形式：</p>
<ul>
<li>String getProperty(String key)</li>
<li>String getProperty(String key, String defaultValue)</li>
<li>T getProperty(String key, Class<T> type)</li>
<li>T getProperty(String key, Class<T> type, T defaultValue)</li>
</ul>
<blockquote>
<p>详情请看–&gt;[美] Craig Walls. Spring实战（第4版） (Kindle 位置 1660-1661). 人民邮电出版社. Kindle 版本.</p>
</blockquote>
<p>当然Environment还提供了一些跟属性相关的方法和用来检查哪个profile处于激活状态的方法，详细章节在[Spring 实战（第4版）第三章 3.5小节-运行时值注入-注入外部的值]有详细记载</p>
<h4 id="解析属性占位符">解析属性占位符</h4>
<p>Spring一直支持将属性定义到外部的属性的文件中，并使用占位符值将其插入到Spring bean中。在Spring装配中，占位符的形式为使用“${ … }”包装的属性名称。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sgtPeppers&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;soundsystem.BlankDisc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_title</span>=<span class="string">&quot;$&#123;disc.title&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_artist</span>=<span class="string">&quot;$&#123;disc.artist&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果我们依赖于组件扫描和自动装配来创建和初始化应用组件的话，那么就没有指定占位符的配置文件或类了。在这种情况下，我们可以使用@Value注解，它的使用方式与@Autowired注解非常相似。比如，在BlankDisc类中，构造器可以改成如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlankDisc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Value(&quot;$&#123;disc.title&#125;&quot;)</span> String title,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Value(&quot;$&#123;disc.artist&#125;&quot;)</span> String artist)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = title;</span><br><span class="line">  <span class="keyword">this</span>.artist = artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>为了使用占位符</strong>，我们必须要配置一个PropertyPlaceholderConfigurer bean或PropertySourcesPlaceholderConfigurer bean。从Spring 3.1开始，推荐使用PropertySourcesPlaceholderConfigurer，因为它能够基于Spring Environment及其属性源来解析占位符。</p>
<p>如下的 @Bean方法在Java中配置了PropertySourcesPlaceholderConfigurer ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">placeholderConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想使用XML配置的话，Spring context命名空间中的&lt;context:propertyplaceholder&gt;元素将会为你生成PropertySourcesPlaceholderConfigurer bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:property-placeholder</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解析外部属性能够将值的处理推迟到运行时，但是它的关注点在于根据名称解析来自于Spring Environment和属性源的属性。而Spring表达式语言提供了一种更通用的方式在运行时计算所要注入的值。</p>
<h4 id="使用Spring表达式语言进行装配">使用Spring表达式语言进行装配</h4>
<p>Spring 3引入了Spring表达式语言（Spring Expression Language，SpEL），它能够以一种强大和简洁的方式将值装配到bean属性和构造器参数中，在这个过程中所使用的表达式会在运行时计算得到值。</p>
<p>SpEL拥有很多特性，包括：</p>
<ol>
<li>使用bean的ID来引用bean；</li>
<li>调用方法和访问对象的属性；</li>
<li>对值进行算术、关系和逻辑运算；</li>
<li>正则表达式匹配；</li>
<li>集合操作。</li>
</ol>
<p>需要了解的第一件事情就是<strong>SpEL表达式</strong>要放到“<strong>#{ … }</strong>”之中，这与属性占位符有些类似，属性占位符需要放到“<strong>${ … }</strong>”之中。下面所展现的可能是最简单的SpEL表达式了：</p>
<p>如果通过组件扫描创建bean的话，在注入属性和构造器参数时，我们可以使用@Value注解，这与之前看到的属性占位符非常类似。不过，在这里我们所使用的不是占位符表达式，而是SpEL表达式。例如，下面的样例展现了BlankDisc，它会从系统属性中获取专辑名称和艺术家的名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlankDisc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;disc.title&#x27;]&#125;&quot;)</span> String title,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;disc.artist&#x27;]&#125;&quot;)</span> String artist)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = title;</span><br><span class="line">  <span class="keyword">this</span>.artist = artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在XML配置中，你可以将SpEL表达式传入<property> 或 <constructor-arg> 的 value属性中，或者将其作为p-命名空间或c-命名空间条目的值。例如，在如下BlankDisc</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sgtPeppers&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;soundsystem.BlankDisc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_title</span>=<span class="string">&quot;#&#123;systemProperties[&#x27;disc.title&#x27;]&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_artist</span>=<span class="string">&quot;#&#123;systemProperties[&#x27;disc.artist&#x27;]&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpEL表达式也可以引用其他的bean或其他bean的属性。例如，如下的表达式会计算得到ID为sgtPeppers的bean的artist</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#&#123;sgtPeppers.artist&#125;</span><br></pre></td></tr></table></figure>
<p>我们还可以通过systemProperties对象引用系统属性：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#&#123;systemProperties[&#x27;disc.title&#x27;]&#125;</span><br></pre></td></tr></table></figure>
<p>如果要在SpEL中访问类作用域的方法和常量的话，要依赖T()这个关键的运算符。例如，为了在SpEL中表达Java的Math类，需要按照如下的方式使用T() 运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T(java.lang.Math)</span><br></pre></td></tr></table></figure>
<h5 id="SpEL运算符">SpEL运算符</h5>
<table>
<thead>
<tr>
<th>运行符类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>算数运算</td>
<td>+ 、 - 、 * 、 / 、 % 、 ^</td>
</tr>
<tr>
<td>比较运算</td>
<td>&lt; 、 &gt; 、 == 、 &lt;= 、 &gt;= 、 lt 、 gt 、 eq 、 le 、 ge</td>
</tr>
<tr>
<td>逻辑运算</td>
<td>and 、 or 、 not 、 │</td>
</tr>
<tr>
<td>条件运算</td>
<td>?: (ternary) 、 ?: (Elvis)</td>
</tr>
<tr>
<td>正则表达式</td>
<td>matches</td>
</tr>
</tbody>
</table>
<blockquote>
<p>具体详细章节在 [Spring 实战（第4版）第三章 3.5小节-运行时值注入-使用Spring表达式语言进行装配] 有详细记载</p>
</blockquote>
<p>[美] Craig Walls. Spring实战（第4版） 人民邮电出版社. Kindle 版本.</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java上传和下载</title>
    <url>/2020/11/18/Java%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>不管是上传和下载，我发现都需要设置请求头之类的配置，才能够完成上传下载功能</p>
<h2 id="上传">上传</h2>
<p>上传的请求头等设置是在表单里面设置的，比如form表单中设置**<code>enctype=&quot;multipart/form-data&quot;</code>**<a id="more"></a></p>
<p>服务器里面对文件的处理</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前提：获取文件后</span></span><br><span class="line"><span class="comment">#获取文件名</span></span><br><span class="line"><span class="keyword">String</span> filename = <span class="keyword">file</span>.getOriginalFilename();</span><br><span class="line"><span class="keyword">String</span> path = <span class="string">&quot;F:\\download&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">##判断文件是否已经存在，文件目录是否存在，不在就新建</span></span><br><span class="line"><span class="keyword">File</span> filefake = new <span class="keyword">File</span>(path,filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!filefake.getParentFile().<span class="keyword">exists</span>()) &#123; </span><br><span class="line">	filefake.getParentFile().mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#把文件传输到指定路径</span></span><br><span class="line"><span class="keyword">file</span>.transferTo(new <span class="keyword">File</span>(path+<span class="keyword">File</span>.separator+filename));</span><br></pre></td></tr></table></figure>
<h2 id="下载">下载</h2>
<p>下载最重要的是设置**<span class="label info">Content-Disposition</span><strong>响应头和实体头部</strong><span class="label info">Content-Disposition</span>**</p>
<h3 id="Content-Disposition">Content-Disposition</h3>
<p>在常规的HTTP应答中，<strong><span class="label info">Content-Disposition</span></strong> 响应头指示回复的内容该以何种形式展示，是以<strong>内联</strong>的形式（即网页或者页面的一部分），还是以<strong>附件</strong>的形式下载并保存到本地。</p>
<p>在multipart/form-data类型的应答消息体中， <strong><span class="label info">Content-Disposition</span></strong> 消息头可以被用在multipart消息体的子部分中，用来给出其对应字段的相关信息。各个子部分由在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><span class="label warning">Content-Type</span></a> 中定义的<strong>分隔符</strong>分隔。用在消息体自身则无实际意义。</p>
<p>Content-Disposition消息头最初是在MIME标准中定义的，HTTP表单及<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 请求只用到了其所有参数的一个子集。只有<code>form-data</code>以及可选的<code>name</code>和<code>filename</code>三个参数可以应用在HTTP场景中。</p>
<h4 id="1-作为消息主体中的消息头">1.作为消息主体中的消息头</h4>
<p>在HTTP场景中，第一个参数或者是**<code>inline</code>**（默认值，表示回复中的消息体会以页面的一部分或者整个页面的形式展示），或者是<code>attachment</code>（意味着消息体应该被下载到本地；大多数浏览器会呈现一个“保存为”的对话框，将<code>filename</code>的值预填为下载后的文件名，假如它存在的话）。</p>
<div class="note default">
            <p>Content-Disposition: inline<br>Content-Disposition: attachment<br>Content-Disposition: attachment; filename=“filename.jpg”</p>
          </div>
<h4 id="2-作为multipart-body中的消息头">2.作为multipart body中的消息头</h4>
<div class="note default">
            <p>Content-Disposition: form-data<br>Content-Disposition: form-data; attachment<br>Content-Disposition: form-data; attachment; filename=“filename.jpg”</p>
          </div>
<blockquote>
<p>详细内容请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition"><span class="label default">这里</span></a></p>
</blockquote>
<h3 id="Content-Type">Content-Type</h3>
<p><strong><span class="label info">Content-Type</span></strong> 实体头部用于指示资源的MIME类型 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/MIME_type">media type</a> 。</p>
<p>在响应中，<span class="label info">Content-Type</span>标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Content-Type-Options"><code>X-Content-Type-Options</code></a> 设置为 <strong>nosniff</strong>。</p>
<p>在请求中 (如<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT"><code>PUT</code></a>)，客户端告诉服务器实际发送的数据类型</p>
<blockquote>
<p>详细内容请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><span class="label default">这里</span></a></p>
</blockquote>
<hr>
### 下载文件的设置
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#获取文件</span><br><span class="line">File file = <span class="keyword">new</span> <span class="constructor">File(<span class="params">url</span>)</span>;</span><br><span class="line">String filename = file.get<span class="constructor">Name()</span>;		</span><br><span class="line"></span><br><span class="line">#设置响应头和实体部分</span><br><span class="line">response.set<span class="constructor">ContentType(<span class="string">&quot;application/x-msdownload&quot;</span>)</span>;</span><br><span class="line">response.set<span class="constructor">Header(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="params">filename</span>)</span>;</span><br><span class="line"></span><br><span class="line">特殊的传导机制，把文件传输到响应中，类似response.get<span class="constructor">OutputStream()</span>.write<span class="literal">()</span>功能;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Files</span>.</span></span>copy(file.<span class="keyword">to</span><span class="constructor">Path()</span>, response.get<span class="constructor">OutputStream()</span>);</span><br></pre></td></tr></table></figure>
<h3 id="在线查看文件的设置">在线查看文件的设置</h3>
<p>感觉跟下载有点想像，就请求头和实体部分不同而已</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#获取文件和文件名</span></span><br><span class="line">File file = <span class="keyword">new</span> File(url);</span><br><span class="line">String filename = file.getName();</span><br><span class="line"></span><br><span class="line"><span class="meta">#设置响应头和实体部分</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename);		response.setContentType(<span class="string">&quot;application/pdf;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#把文件存储在缓存流中</span></span><br><span class="line">byte[] b = <span class="keyword">new</span> byte[fis.available()];</span><br><span class="line">FileInputStream fis = <span class="literal">null</span>;</span><br><span class="line"><span class="meta">#把缓虫区的字符流读入b中</span></span><br><span class="line">fis.read(b);</span><br><span class="line"><span class="meta">#往响应中写入数据</span></span><br><span class="line">response.getOutputStream().write(b);</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring配置数据源</title>
    <url>/2020/11/18/Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    <content><![CDATA[<p>无论选择Spring的哪种数据访问方式，你都需要配置一个数据源的引用。Spring提供了在Spring上下文中配置数据源bean的多种方式，包括：</p>
<ol>
<li>通过JDBC驱动程序定义的数据源；</li>
<li>通过JNDI查找的数据源；<a id="more"></a></li>
<li>连接池的数据源。</li>
</ol>
<p>对于即将发布到生产环境中的应用程序，我建议使用从连接池获取连接的数据源。如果可能的话，我倾向于通过应用服务器的JNDI来获取数据源。</p>
<h2 id="使用JNDI数据源">使用JNDI数据源</h2>
<p>Spring应用程序经常部署在Java EE应用服务器中，如WebSphere、JBoss或甚至像Tomcat这样的Web容器中。这些服务器允许你配置通过JNDI获取数据源。这种配置的好处在于数据源完全可以在应用程序之外进行管理，这样应用程序只需在访问数据库的时候查找数据源就可以了。另外，在应用服务器中管理的数据源通常以池的方式组织，从而具备更好的性能，并且还支持系统管理员对其进行热切换。</p>
<p>利用Spring，我们可以像使用Spring bean那样配置JNDI中数据源的引用并将其装配到需要的类中。位于jee命名空间下的<a href="jee:jndi-lookup">jee:jndi-lookup</a>元素可以用于检索JNDI中的任何对象（包括数据源）并将其作为Spring的bean。例如，如果应用程序的数据源配置在JNDI中，我们可以使用<a href="jee:jndi-lookup">jee:jndi-lookup</a>元素将其装配到Spring中，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">jndi-name</span>=<span class="string">&quot;/jdbc/SpitterDS&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">resource-ref</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中 jndi-name属性用于指定JNDI中资源的名称。如果只设置了jndi-name属性，那么就会根据指定的名称查找数据源。但是，如果应用程序运行在Java应用服务器中，你需要将resource-ref属性设置为true，这样给定的jndi-name将会自动添加“java:comp/env/”前缀。</p>
<p>如果想使用Java配置的话，那我们可以借助JndiObjectFactoryBean从JNDI中查找DataSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JndiObjectFactoryBean <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  JndiObjectFactoryBean jndiObjectFB = <span class="keyword">new</span> JndiObjectFactoryBean();</span><br><span class="line">  jndiObjectFB.setJndiName(<span class="string">&quot;jdbc/SpittrDS&quot;</span>);</span><br><span class="line">  jndiObjectFB.setResourceRef(<span class="keyword">true</span>);</span><br><span class="line">  jndiObjectFB.setProxyInterface(javax.sql.DataSource.class);</span><br><span class="line">  <span class="keyword">return</span> jndiObjectFB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用数据连接池">使用数据连接池</h2>
<p>如果你不能从JNDI中查找数据源，那么下一个选择就是直接在Spring中配置数据源连接池。尽管Spring并没有提供数据源连接池实现，但是我们有多项可用的方案，包括如下开源的实现：</p>
<ol>
<li>Apache Commons DBCP (<a href="http://jakarta.apache.org/commons/dbcp">http://jakarta.apache.org/commons/dbcp</a>)；</li>
<li>c3p0 (<a href="http://sourceforge.net/projects/c3p0/">http://sourceforge.net/projects/c3p0/</a>) ；</li>
<li>BoneCP (<a href="http://jolbox.com/">http://jolbox.com/</a>) 。</li>
</ol>
<p>这些连接池中的大多数都能配置为Spring的数据源，在一定程度上与Spring自带的DriverManagerDataSource 或 SingleConnectionDataSource很类似（我们稍后会对其进行介绍）。例如，如下就是配置DBCP BasicDataSource 的方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:driverClassName</span>=<span class="string">&quot;org.h2.Driver&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:url</span>=<span class="string">&quot;jdbc:h2:tcp://localhost/~/spitter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:username</span>=<span class="string">&quot;sa&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:password</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:initialSize</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:maxActive</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="BasicDataSource的池配置属性">BasicDataSource的池配置属性</h4>
<table>
<thead>
<tr>
<th>池配置属性</th>
<th>所指定的内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>initialSize</td>
<td>池启动时创建的连接数量</td>
</tr>
<tr>
<td>maxActive</td>
<td>同一时间可从池中分配的最多连接数。如果设置为0，表示无限制</td>
</tr>
<tr>
<td>maxIdle</td>
<td>池里不会被释放的最多空闲连接数。如果设置为0，表示无限制</td>
</tr>
<tr>
<td>maxOpenPreparedStatements</td>
<td>在同一时间能够从语句池中分配的预处理语句（prepared statement）的最大数量。如果设置为0，表示无限制</td>
</tr>
<tr>
<td>maxWait</td>
<td>在抛出异常之前，池等待连接回收的最大时间（当没有可用连接时）。如果设置为-1，表示无限等待</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td>连接在池中保持空闲而不被回收的最大时间</td>
</tr>
<tr>
<td>minIdle</td>
<td>在不创建新连接的情况下，池中保持空闲的最小连接数</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>是否对预处理语句（prepared statement）进行池管理（布尔值）</td>
</tr>
</tbody>
</table>
<h2 id="基于JDBC驱动的数据源">基于JDBC驱动的数据源</h2>
<p>在Spring中，通过JDBC驱动定义数据源是最简单的配置方式。Spring提供了三个这样的数据源类（均位于org.springframework.jdbc.datasource包中）供选择：</p>
<ol>
<li>DriverManagerDataSource：在每个连接请求时都会返回一个新建的连接。与DBCP的BasicDataSource 不同，由 DriverManagerDataSource提供的连接并没有进行池化管理；</li>
<li>SimpleDriverDataSource ：与 DriverManagerDataSource的工作方式类似，但是它直接使用JDBC驱动，来解决在特定环境下的类加载问题，这样的环境包括OSGi容器； SingleConnectionDataSource：在每个连接请求时都会返回同一个的连接。尽管</li>
<li>SingleConnectionDataSource不是严格意义上的连接池数据源，但是你可以将其视为只有一个连接的池。 以上这些数据源的配置与DBCPBasicDataSource的配置类似。例如，如下就是配置DriverManagerDataSource</li>
</ol>
<p>与具备池功能的数据源相比，唯一的区别在于这些数据源bean都没有提供连接池功能，所以没有可配置的池相关的属性。</p>
<p>尽管这些数据源对于小应用或开发环境来说是不错的，但是要将其用于生产环境，你还是需要慎重考虑。因为SingleConnectionDataSource有且只有一个数据库连接，所以不适合用于多线程的应用程序，最好只在测试的时候使用。而DriverManagerDataSource 和 SimpleDriverDataSource尽管支持多线程，但是在每次请求连接的时候都会创建新连接，这是以性能为代价的。鉴于以上的这些限制，我强烈建议应该使用数据源连接池。</p>
<h2 id="使用嵌入式的数据源">使用嵌入式的数据源</h2>
<p>除此之外，还有一个数据源是我想对读者介绍的：嵌入式数据库（embedded database）。嵌入式数据库作为应用的一部分运行，而不是应用连接的独立数据库服务器。尽管在生产环境的设置中，它并没有太大的用处，但是对于开发和测试来讲，嵌入式数据库都是很好的可选方案。这是因为每次重启应用或运行测试的时候，都能够重新填充测试数据。</p>
<p>Spring的jdbc命名空间能够简化嵌入式数据库的配置。例如，如下的程序清单展现了如何使用jdbc命名空间来配置嵌入式的H2数据库，它会预先加载一组测试数据。</p>
<p>除此之外，还有一个数据源是我想对读者介绍的：嵌入式数据库（embedded database）。嵌入式数据库作为应用的一部分运行，而不是应用连接的独立数据库服务器。尽管在生产环境的设置中，它并没有太大的用处，但是对于开发和测试来讲，嵌入式数据库都是很好的可选方案。这是因为每次重启应用或运行测试的时候，都能够重新填充测试数据。 Spring的jdbc命名空间能够简化嵌入式数据库的配置。例如，如下的程序清单展现了如何使用jdbc命名空间来配置嵌入式的H2数据库，它会预先加载一组测试数据。</p>
<blockquote>
<p>使用jdbc命名空间配置嵌入式数据库</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">jdbc:embedded-</span></span></span><br><span class="line"><span class="tag">     <span class="attr">database</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">type</span>=<span class="string">&quot;H2&quot;</span>&gt;</span>     <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">&quot;com/habum</span></span></span><br><span class="line"><span class="tag"><span class="string">     a/spitter/db/jdbc/schema.sql&quot;</span>/&gt;</span>     <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">&quot;com/habuma/sp</span></span></span><br><span class="line"><span class="tag"><span class="string">     itter/db/jdbc/test-data.sql&quot;</span>/&gt;</span>   <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实嵌入式数据库就是提前编写好建立数据库和表的sql语句和插入数据库表数据的语句，每一次使用数据库，都是同样的数据，就是不会改变</p>
</blockquote>
<h2 id="使用profile选择数据源">使用profile选择数据源</h2>
<p>参考文章–》Spring 4.0 高级装配的Profile章节</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
